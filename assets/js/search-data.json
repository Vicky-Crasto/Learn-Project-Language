{
  
    
        "post0": {
            "title": "1.2 Working with text  files",
            "content": "Working with text file in python . Creating a text file in python . %%writefile test.txt ( Use this magic command before the text) . Hello, this is a new file create using python ide. This the second line of the file. . Writing test.txt . Understanding the location of the file . Give the location of the present working directory . pwd() . &#39;C: Users Vicky.Crasto OneDrive - Unilever Work_file_082021 05_Other_learning NLP 01_Udemy_JoseP&#39; . Opening the file . myfile = open(&quot;test.txt&quot;) . myfile . &lt;_io.TextIOWrapper name=&#39;test.txt&#39; mode=&#39;r&#39; encoding=&#39;cp1252&#39;&gt; . This is the location in the memory which hold the file. . Using .read() and .seek() . myfile.read() . &#39;Hello, this is a new file create using python ide. nThis the second line of the file. n&#39; . myfile.read() . &#39;&#39; . The second time the function it called it does not give any output since the cursor has reached the end of the document. There is nothing more read. Hence we need to reset the cursor to the start. . Resetting the cursor . myfile.seek(0) . 0 . myfile.read() . &#39;Hello, this is a new file create using python ide. nThis the second line of the file. n&#39; . Using .readlines() . readlines() help to read the file line by line. Note: All the data is helded in the memory, hence large files will need to handled carefully. . myfile.seek(0) myfile.readlines() . [&#39;Hello, this is a new file create using python ide. n&#39;, &#39;This the second line of the file. n&#39;] . myfile.close() . Writing a file - Understanding the mode . While opening the file, we can open it with different modes . &#39;r&#39; default to read the file | &#39;w+&#39; read and write the file.(Overwrites the existing file) | &#39;wb+&#39; read and write as binary (used in case of pdf) | . myfile = open(&quot;test.txt&quot;, mode= &#39;w+&#39;) myfile.write(&quot;This is an additional file&quot;) . 26 . myfile.seek(0) myfile.readlines() . [&#39;This is an additional file&#39;] . Hence the existing data is deleted and the new data is overwrite. . myfile.close() . Appending a file . Passing the argument &#39;a&#39; opens the file and puts the pointer at the end, so anything written is appended. . myfile = open(&quot;test.txt&quot;, &#39;a+&#39;) myfile.write(&quot; nAppending a new line to the existing line&quot;) myfile.seek(0) print(myfile.read()) . This is an additional file Appending a new line to the existing line Appending a new line to the existing line Appending a new line to the existing line Appending a new line to the existing line . myfile.close() . Aliases and context managers . You can assign temporary variable names as aliases, and manage the opening and closing of files automatically using a context manager: . with open(&#39;test.txt&#39;,&#39;r&#39;) as txt: first_line = txt.readlines()[0] print(first_line) . This is an additional file . By using this method, the file is opened, read and closed by context mananger automatically after doing the specified operation. . first_line . &#39;This is an additional file n&#39; . txt.read() . ValueError Traceback (most recent call last) C: Users VICKY~1.CRA AppData Local Temp/ipykernel_9856/1416744708.py in &lt;module&gt; -&gt; 1 txt.read() ValueError: I/O operation on closed file. . Hence the extract line remain in the object but the file is closed by the context manager. . Iterating through a file . with open(&#39;test.txt&#39;, &#39;r&#39;) as txt: for line in txt: print(line , end=&#39;$$$$&#39;) . This is an additional file $$$$Appending a new line to the existing line $$$$Appending a new line to the existing line $$$$Appending a new line to the existing line $$$$Appending a new line to the existing line$$$$ .",
            "url": "https://vicky-crasto.github.io/Learn-Project-Language/readlines()/textfiles/2022/06/28/1-2-Working-with-text-files.html",
            "relUrl": "/readlines()/textfiles/2022/06/28/1-2-Working-with-text-files.html",
            "date": " • Jun 28, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Coe_policing_equity",
            "content": "Libraries needed . library(tidyverse) . ## Warning: package &#39;tidyverse&#39; was built under R version 4.1.3 ## -- Attaching packages tidyverse 1.3.1 -- ## v ggplot2 3.3.5 v purrr 0.3.4 ## v tibble 3.1.5 v dplyr 1.0.7 ## v tidyr 1.1.4 v stringr 1.4.0 ## v readr 2.1.2 v forcats 0.5.1 ## Warning: package &#39;readr&#39; was built under R version 4.1.3 ## -- Conflicts tidyverse_conflicts() -- ## x dplyr::filter() masks stats::filter() ## x dplyr::lag() masks stats::lag() . library(lubridate) . ## ## Attaching package: &#39;lubridate&#39; ## The following objects are masked from &#39;package:base&#39;: ## ## date, intersect, setdiff, union . Reading the data . coe_df &lt;- read.csv(&quot;37-00049_UOF-P_2016_prepped.csv&quot;, header = T, stringsAsFactors = F) head(coe_df) . ## INCIDENT_DATE INCIDENT_TIME UOF_NUMBER OFFICER_ID OFFICER_GENDER ## 1 OCCURRED_D OCCURRED_T UOFNum CURRENT_BA OffSex ## 2 9/3/16 4:14:00 AM 37702 10810 Male ## 3 3/22/16 11:00:00 PM 33413 7706 Male ## 4 5/22/16 1:29:00 PM 34567 11014 Male ## 5 1/10/16 8:55:00 PM 31460 6692 Male ## 6 11/8/16 2:30:00 AM 37879, 37898 9844 Male ## OFFICER_RACE OFFICER_HIRE_DATE OFFICER_YEARS_ON_FORCE OFFICER_INJURY ## 1 OffRace HIRE_DT INCIDENT_DATE_LESS_ OFF_INJURE ## 2 Black 5/7/14 2 No ## 3 White 1/8/99 17 Yes ## 4 Black 5/20/15 1 No ## 5 Black 7/29/91 24 No ## 6 White 10/4/09 7 No ## OFFICER_INJURY_TYPE OFFICER_HOSPITALIZATION SUBJECT_ID SUBJECT_RACE ## 1 OFF_INJURE_DESC OFF_HOSPIT CitNum CitRace ## 2 No injuries noted or visible No 46424 Black ## 3 Sprain/Strain Yes 44324 Hispanic ## 4 No injuries noted or visible No 45126 Hispanic ## 5 No injuries noted or visible No 43150 Hispanic ## 6 No injuries noted or visible No 47307 Black ## SUBJECT_GENDER SUBJECT_INJURY SUBJECT_INJURY_TYPE ## 1 CitSex CIT_INJURE SUBJ_INJURE_DESC ## 2 Female Yes Non-Visible Injury/Pain ## 3 Male No No injuries noted or visible ## 4 Male No No injuries noted or visible ## 5 Male Yes Laceration/Cut ## 6 Male No No injuries noted or visible ## SUBJECT_WAS_ARRESTED SUBJECT_DESCRIPTION SUBJECT_OFFENSE ## 1 CIT_ARREST CIT_INFL_A CitChargeT ## 2 Yes Mentally unstable APOWW ## 3 Yes Mentally unstable APOWW ## 4 Yes Unknown APOWW ## 5 Yes FD-Unknown if Armed Evading Arrest ## 6 Yes Unknown Other Misdemeanor Arrest ## REPORTING_AREA BEAT SECTOR DIVISION LOCATION_DISTRICT STREET_NUMBER ## 1 RA BEAT SECTOR DIVISION DIST_NAME STREET_N ## 2 2062 134 130 CENTRAL D14 211 ## 3 1197 237 230 NORTHEAST D9 7647 ## 4 4153 432 430 SOUTHWEST D6 716 ## 5 4523 641 640 NORTH CENTRAL D11 5600 ## 6 2167 346 340 SOUTHEAST D7 4600 ## STREET_NAME STREET_DIRECTION STREET_TYPE ## 1 STREET street_g street_t ## 2 Ervay N St. ## 3 Ferguson NULL Rd. ## 4 bimebella dr NULL Ln. ## 5 LBJ NULL Frwy. ## 6 Malcolm X S Blvd. ## LOCATION_FULL_STREET_ADDRESS_OR_INTERSECTION LOCATION_CITY LOCATION_STATE ## 1 Street Address City State ## 2 211 N ERVAY ST Dallas TX ## 3 7647 FERGUSON RD Dallas TX ## 4 716 BIMEBELLA LN Dallas TX ## 5 5600 L B J FWY Dallas TX ## 6 4600 S MALCOLM X BLVD Dallas TX ## LOCATION_LATITUDE LOCATION_LONGITUDE INCIDENT_REASON REASON_FOR_FORCE ## 1 Latitude Longitude SERVICE_TY UOF_REASON ## 2 32.782205 -96.797461 Arrest Arrest ## 3 32.798978 -96.717493 Arrest Arrest ## 4 32.73971 -96.92519 Arrest Arrest ## 5 Arrest Arrest ## 6 Arrest Arrest ## TYPE_OF_FORCE_USED1 TYPE_OF_FORCE_USED2 TYPE_OF_FORCE_USED3 ## 1 ForceType1 ForceType2 ForceType3 ## 2 Hand/Arm/Elbow Strike ## 3 Joint Locks ## 4 Take Down - Group ## 5 K-9 Deployment ## 6 Verbal Command Take Down - Arm ## TYPE_OF_FORCE_USED4 TYPE_OF_FORCE_USED5 TYPE_OF_FORCE_USED6 ## 1 ForceType4 ForceType5 ForceType6 ## 2 ## 3 ## 4 ## 5 ## 6 ## TYPE_OF_FORCE_USED7 TYPE_OF_FORCE_USED8 TYPE_OF_FORCE_USED9 ## 1 ForceType7 ForceType8 ForceType9 ## 2 ## 3 ## 4 ## 5 ## 6 ## TYPE_OF_FORCE_USED10 NUMBER_EC_CYCLES FORCE_EFFECTIVE ## 1 ForceType10 Cycles_Num ForceEffec ## 2 NULL Yes ## 3 NULL Yes ## 4 NULL Yes ## 5 NULL Yes ## 6 NULL No, Yes . ### Removing the first row coe_df &lt;- coe_df[-1,] . ###Changing the format of variables . coe_df$INCIDENT_DATE &lt;- as.Date(coe_df$INCIDENT_DATE, &quot;%m/%d/%y&quot;) coe_df$INCIDENT_TIME &lt;- parse_date_time(coe_df$INCIDENT_TIME, &quot;%I:%M:%S %p&quot;) . ## Warning: 10 failed to parse. . Creating two additional variables. . ### Creating month varible coe_df$month &lt;- month(coe_df$INCIDENT_DATE, label = T, abbr = T) ### Creating time of day variable coe_df$timeofday &lt;- cut(hour(coe_df$INCIDENT_TIME),breaks = c(-Inf,6,12,4,9,23), labels = c(&quot;Night&quot;, &quot;Morning&quot;,&quot;Afternoon&quot;,&quot;Evening&quot;, &quot;Night&quot;)) . 1. Have the number of policing incidents remained constant through the year? . coe_df %&gt;% group_by(month)%&gt;% summarise(incident_count = n())-&gt; incidentsbyyear plot1 &lt;- ggplot(data = incidentsbyyear, aes(x = month, y= incident_count)) + geom_bar(stat = &quot;identity&quot;,fill = &quot;steelblue&quot;) + labs(title= &quot;Number of incidents by month&quot;, x = &quot;Months&quot;, y = &quot;Number of incidents&quot;) plot1 . . We see that number of policing incidents have been decreasing over the year. . 2. At what time of the day are the incident most frequent? . coe_df %&gt;% group_by(timeofday)%&gt;% summarise(incident_count = n())-&gt; incidentsbytimeofday plot2 &lt;- ggplot(data = incidentsbytimeofday, aes(x = timeofday, y= incident_count)) + geom_bar(stat = &quot;identity&quot;,fill = &quot;steelblue&quot;) + labs(title= &quot;Number of incidents by Time of day&quot;, x = &quot;Time of day&quot;, y = &quot;Number of incidents&quot;) plot2 . . We see that majority of the incidents occur at night, that is between 9 PM to 6 AM in the morning. . 3. Does the distribution of the policing incidents and the gender and race of the officer have any relation. . coe_df %&gt;% group_by(OFFICER_GENDER, OFFICER_RACE)%&gt;% summarise(incident_count = n())-&gt; incidentsbyofficer . ## `summarise()` has grouped output by &#39;OFFICER_GENDER&#39;. You can override using the ## `.groups` argument. . plot3 &lt;- ggplot(data = incidentsbyofficer, aes(x = OFFICER_RACE, y= incident_count, fill = OFFICER_GENDER )) + geom_bar(stat = &quot;identity&quot;) + labs(title= &quot;Number of incidents by Race of the officer&quot;, x = &quot;Race of the officer&quot;, y = &quot;Number of incidents&quot;) plot3 . . We see that most of the officers involved in the reported incidence are White. Also we find that male officer are in majority compared to female officers. We also have Hispanic and Black officer with a significant number of reported incidences. . 4. Does the gender of the officer and the time of day occurence have any relation. . coe_df %&gt;% filter(timeofday!=&quot;NA&quot;)%&gt;% group_by(OFFICER_GENDER, timeofday)%&gt;% summarise(incident_count = n())-&gt; incidentsbyoffday . ## `summarise()` has grouped output by &#39;OFFICER_GENDER&#39;. You can override using the ## `.groups` argument. . plot4 &lt;- ggplot(data = incidentsbyoffday, aes(x = timeofday, y= incident_count, fill = OFFICER_GENDER )) + geom_bar(stat = &quot;identity&quot;) + labs(title= &quot;Number of incidents by Time of day&quot;, x = &quot;Time of day&quot;, y = &quot;Number of incidents&quot;) plot4 . . We see that both the gender the reported incidents are majorly in the night. . 5. Does the Race of the officer has any relationship of getting injuried during the policing incident . coe_df %&gt;% filter(timeofday!=&quot;NA&quot;)%&gt;% group_by(OFFICER_RACE, OFFICER_INJURY)%&gt;% summarise(incident_count = n())-&gt; incidentsbyinjury . ## `summarise()` has grouped output by &#39;OFFICER_RACE&#39;. You can override using the ## `.groups` argument. . plot5 &lt;- ggplot(data = incidentsbyinjury, aes(x = OFFICER_RACE, y= incident_count, fill = OFFICER_INJURY )) + geom_bar(stat = &quot;identity&quot;) + labs(title= &quot;Injury to officer and their Race&quot;, x = &quot;Race of the officer&quot;, y = &quot;Number of incidents&quot;) plot5 . . We see that majorly officers and not been injured in the incident. Among those who were injuried we see that most of them are White. . Also a small percentage of Hispanic and Black has been reported to have injuried. . 6. Does the race of subject and the time of day of the incident has any relationship. . coe_df %&gt;% filter(timeofday!=&quot;NA&quot;,SUBJECT_RACE!=&quot;NULL&quot; )%&gt;% group_by(SUBJECT_RACE, timeofday)%&gt;% summarise(incident_count = n())%&gt;%filter(incident_count&gt;20)-&gt; incidentsbysubday . ## `summarise()` has grouped output by &#39;SUBJECT_RACE&#39;. You can override using the ## `.groups` argument. . plot6 &lt;- ggplot(data = incidentsbysubday, aes(x = SUBJECT_RACE, y= incident_count, fill = timeofday )) + geom_bar(stat = &quot;identity&quot;) + labs(title= &quot;Race of the subject and time of day&quot;, x = &quot;Race of subject&quot;, y = &quot;Number of incidents&quot;)+ coord_flip() plot6 . . We see that Black subject are mostly in incidences reported in the night or in the evening. There are some case reported the afternoon, but very few in the morning. . Both White and Hispanic are active majorly in the night or evening. . But Hispanic are also active in the morning but White are active in the afternoon. . 7. Does the race of subject and the division of the reported incident has any relationship. . coe_df %&gt;% filter(SUBJECT_RACE!=&quot;NULL&quot; )%&gt;% group_by(SUBJECT_RACE, DIVISION)%&gt;% summarise(incident_count = n())%&gt;%filter(incident_count&gt;20)-&gt; incidentsbydivision . ## `summarise()` has grouped output by &#39;SUBJECT_RACE&#39;. You can override using the ## `.groups` argument. . plot7 &lt;- ggplot(data = incidentsbydivision, aes(x = DIVISION, y= incident_count, fill = SUBJECT_RACE )) + geom_bar(stat = &quot;identity&quot;) + labs(title= &quot;Race of the subject and Division&quot;, x = &quot;Division&quot;, y = &quot;Number of incidents&quot;)+ coord_flip() plot7 . . In the South East, South Central, North East and Central division majority of the incidents have Black subjects. . In South West, majority of the incidents involve Hispanic and Blacks. . In South Central is mostly black subjects. However in North Central and Central there are a significant number of white subjects. . 8. Does the race of subject and the arrest has any relationship . coe_df %&gt;% filter(SUBJECT_RACE!=&quot;NULL&quot; )%&gt;% group_by(SUBJECT_RACE, SUBJECT_WAS_ARRESTED)%&gt;% summarise(incident_count = n())%&gt;%filter(incident_count&gt;10)-&gt; incidentsbyarrest . ## `summarise()` has grouped output by &#39;SUBJECT_RACE&#39;. You can override using the ## `.groups` argument. . plot8 &lt;- ggplot(data = incidentsbyarrest, aes(x = SUBJECT_RACE, y= incident_count, fill = SUBJECT_WAS_ARRESTED )) + geom_bar(stat = &quot;identity&quot;) + labs(title= &quot;Race of the subject and Arrest Status&quot;, x = &quot;Race of the subject&quot;, y = &quot;Number of incidents&quot;) plot8 . . We see that most the subject irrespective of the race have been arrested. . 9. Does the race of officer and the race of the subject has any evident relationship. . coe_df %&gt;% filter(SUBJECT_RACE!=&quot;NULL&quot;, OFFICER_RACE!=&quot;NULL&quot;)%&gt;% group_by(SUBJECT_RACE, OFFICER_RACE)%&gt;% summarise(incident_count = n())%&gt;%filter(incident_count&gt;10)-&gt; incidentsbyrace . ## `summarise()` has grouped output by &#39;SUBJECT_RACE&#39;. You can override using the ## `.groups` argument. . plot9 &lt;- ggplot(data = incidentsbyrace, aes(x = OFFICER_RACE, y= incident_count, fill = SUBJECT_RACE )) + geom_bar(stat = &quot;identity&quot;) + labs(title= &quot;Race of subject vs Race of officer&quot;, x = &quot;Race of the Officer&quot;, y = &quot;Number of incidents&quot;) plot9 . . Irrespective of the race of the officer, most of the incidents involve black subject followed by Hispanic and White. . 10. Does the race of subject and the UOF has any relationship. . coe_df %&gt;% filter(SUBJECT_RACE!=&quot;NULL&quot;, OFFICER_RACE!=&quot;NULL&quot;)%&gt;% group_by(SUBJECT_RACE, REASON_FOR_FORCE)%&gt;% summarise(incident_count = n())%&gt;%filter(incident_count&gt;10)-&gt; incidentsbyUOF . ## `summarise()` has grouped output by &#39;SUBJECT_RACE&#39;. You can override using the ## `.groups` argument. . plot10 &lt;- ggplot(data = incidentsbyUOF, aes(x = SUBJECT_RACE, y= incident_count, fill = REASON_FOR_FORCE )) + geom_bar(stat = &quot;identity&quot;) + labs(title= &quot;Race of subject and reason for use of force&quot;, x = &quot;Race of the Subject&quot;, y = &quot;Number of incidents&quot;) plot10 . . We see that across race of the subject, the chief reason for the use of force is Arrest, Active Aggression and Danger to self or others. . Observations . We see that the number of of policing incidents have been steadily decreasing over the year. They reached a peak in March and they went on decreasing to a reach a minimum in December. . | On looking at the time of reported incidents we see that most of them are reported in the night that is from 9.00 PM to 6.00 AM in the morning. . | From the distribution of the incidents with respect to gender and race of the officer we see that most of the male officer are in majority. . | Irrespective of the gender, White officer has most of the incident reported followed by Hispanic and Black officers. . | Across gender, most of the incidents have been reported at night. . | Looking at the injured officers, we see that in most of the incidents the officers are not injured. However, among the injured officers, White officer have been injured the most. . | Looking at the distribution of incidents with regard to the race of the subject and the time of day, we see that Black subjects are mostly in incidences reported in the night or in the evening. There are some case reported the afternoon, but very few in the morning. Both White and Hispanic are active majorly in the night or evening. But Hispanic are also active in the morning but White are active in the afternoon. . | On analyzing the incidents by Division and race of the subject, we find that in the Southeast, South Central, North East and Central division majority of the incidents have Black subjects. In South West, majority of the incidents involve Hispanic and Blacks. In South Central is mostly black subjects. However in North Central and Central there are a significant number of white subjects. . | Also in the reported incidents, the subjects have been majorly arrested irrespective of the the race. Also irrespective of the race of the officer, the subjects involved in the incident are black. . | Looking at the reason for the use of force we find that Arrest, Active Aggression and Danger to self or others are majorly citied reasons across the race of the subjects. . | .",
            "url": "https://vicky-crasto.github.io/Learn-Project-Language/2022/06/26/COE_policing_equity.html",
            "relUrl": "/2022/06/26/COE_policing_equity.html",
            "date": " • Jun 26, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "1.1 Learning to use F string literal",
            "content": "Topics covered . F string formating in printing text | Alignment, padding Fstring | Format dates in Printing | . F string basics . person = &quot;Richard&quot; . print(f&quot;The name of the boy is {person}&quot;) . The name of the boy is Richard . Using a dictionary with f string . d = {&#39;Roll no&#39; : 12 , &#39;Subject&#39;: &quot;English&quot;} . print(f&quot;The student with roll no {d[&#39;Roll no&#39;]}, got highest marks in {d[&#39;Subject&#39;]}&quot;) . The student with roll no 12, got highest marks in English . Using a list . l = [&quot;mango&quot;, &quot;orange&quot;,&quot;banana&quot;] . print(f&quot;The fruit that I enjoy the most is {l[0]} and {l[1]}&quot;) . The fruit that I enjoy the most is mango and orange . Minimum Widths, Alignment and Padding . You can pass arguments inside a nested set of curly braces to set a minimum width for the field, the alignment and even padding characters. . library = [(&#39;Author&#39;, &#39;Topic&#39;, &#39;Pages&#39;), (&#39;Twain&#39;, &#39;Rafting&#39;, 601), (&#39;Feynman&#39;, &#39;Physics&#39;, 95), (&#39;Hamilton&#39;, &#39;Mythology&#39;, 144)] . Tuple unpacking . for author, topic, page in library: print(f&quot;{author}, {topic},{page}&quot;) . Author, Topic,Pages Twain, Rafting,601 Feynman, Physics,95 Hamilton, Mythology,144 . aligning the text . for author, topic, page in library: print(f&quot;{author:{10}} {topic:{8}}{page:{7}}&quot;) . Author Topic Pages Twain Rafting 601 Feynman Physics 95 Hamilton Mythology 144 . Here the first three lines align, except Pages follows a default left-alignment while numbers are right-aligned. Also, the fourth line&#39;s page number is pushed to the right as Mythology exceeds the minimum field width of 8. When setting minimum field widths make sure to take the longest item into account. . To set the alignment, use the character &lt; for left-align, ^ for center, &gt; for right. To set padding, precede the alignment character with the padding character (- and . are common choices). . for author, topic, page in library: print(f&quot;{author:{10}} {topic:{10}}{page:&gt;{7}}&quot;) . Author Topic Pages Twain Rafting 601 Feynman Physics 95 Hamilton Mythology 144 . for author, topic, page in library: print(f&quot;{author:{10}} {topic:{10}}{page:.&gt;{7}}&quot;) . Author Topic ..Pages Twain Rafting ....601 Feynman Physics .....95 Hamilton Mythology ....144 . . from datetime import datetime . today = datetime(year=2022, month =1, day = 27) . print(f&#39;{today:%B,%d, %Y}&#39;) . January,27, 2018 .",
            "url": "https://vicky-crasto.github.io/Learn-Project-Language/nlp/2022/06/25/1-1-Text-Basics-using-Fstring-literal.html",
            "relUrl": "/nlp/2022/06/25/1-1-Text-Basics-using-Fstring-literal.html",
            "date": " • Jun 25, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://vicky-crasto.github.io/Learn-Project-Language/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://vicky-crasto.github.io/Learn-Project-Language/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://vicky-crasto.github.io/Learn-Project-Language/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://vicky-crasto.github.io/Learn-Project-Language/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}