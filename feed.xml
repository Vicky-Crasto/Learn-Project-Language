<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://vicky-crasto.github.io/Learn-Project-Language/feed.xml" rel="self" type="application/atom+xml" /><link href="https://vicky-crasto.github.io/Learn-Project-Language/" rel="alternate" type="text/html" /><updated>2022-07-03T08:02:12-05:00</updated><id>https://vicky-crasto.github.io/Learn-Project-Language/feed.xml</id><title type="html">My experiments with NLP</title><subtitle>My learning notes for Natural Language processing</subtitle><entry><title type="html">2.4 Lemmatization</title><link href="https://vicky-crasto.github.io/Learn-Project-Language/spacy/nlp-chapter-2/lemma/2022/07/01/2-4-Lemmatization.html" rel="alternate" type="text/html" title="2.4 Lemmatization" /><published>2022-07-01T00:00:00-05:00</published><updated>2022-07-01T00:00:00-05:00</updated><id>https://vicky-crasto.github.io/Learn-Project-Language/spacy/nlp-chapter-2/lemma/2022/07/01/2-4-Lemmatization</id><content type="html" xml:base="https://vicky-crasto.github.io/Learn-Project-Language/spacy/nlp-chapter-2/lemma/2022/07/01/2-4-Lemmatization.html"><![CDATA[<!--
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: _notebooks/2022-07-01-2-4-Lemmatization.ipynb
-->

<div class="container" id="notebook-container">
        
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>In contrast to stemming, lemmatization looks beyond word reduction, and considers a language's full vocabulary to apply a <em>morphological analysis</em> to words. The lemma of 'was' is 'be' and the lemma of 'mice' is 'mouse'. Further, the lemma of 'meeting' might be 'meet' or 'meeting' depending on its use in a sentence.</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="kn">import</span> <span class="nn">spacy</span>
<span class="n">nlp</span> <span class="o">=</span> <span class="n">spacy</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="s1">&#39;en_core_web_sm&#39;</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">doc1</span> <span class="o">=</span> <span class="n">nlp</span><span class="p">(</span><span class="sa">u</span><span class="s2">&quot;I am a runner running in a race because I love to run since I ran today&quot;</span><span class="p">)</span>

<span class="k">for</span> <span class="n">token</span> <span class="ow">in</span> <span class="n">doc1</span><span class="p">:</span>
    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;</span><span class="si">{</span><span class="n">token</span><span class="o">.</span><span class="n">text</span><span class="si">:</span><span class="s1">&lt;</span><span class="si">{</span><span class="mi">10</span><span class="si">}}{</span><span class="n">token</span><span class="o">.</span><span class="n">pos_</span><span class="si">:</span><span class="s1">&lt;</span><span class="si">{</span><span class="mi">10</span><span class="si">}}{</span><span class="n">token</span><span class="o">.</span><span class="n">lemma</span><span class="si">:</span><span class="s1">&lt;</span><span class="si">{</span><span class="mi">25</span><span class="si">}}{</span><span class="n">token</span><span class="o">.</span><span class="n">lemma_</span><span class="si">:</span><span class="s1">&lt;</span><span class="si">{</span><span class="mi">10</span><span class="si">}}</span><span class="s1">&#39;</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>I         PRON      4690420944186131903      I         
am        AUX       10382539506755952630     be        
a         DET       11901859001352538922     a         
runner    NOUN      12640964157389618806     runner    
running   VERB      12767647472892411841     run       
in        ADP       3002984154512732771      in        
a         DET       11901859001352538922     a         
race      NOUN      8048469955494714898      race      
because   SCONJ     16950148841647037698     because   
I         PRON      4690420944186131903      I         
love      VERB      3702023516439754181      love      
to        PART      3791531372978436496      to        
run       VERB      12767647472892411841     run       
since     SCONJ     10066841407251338481     since     
I         PRON      4690420944186131903      I         
ran       VERB      12767647472892411841     run       
today     NOUN      11042482332948150395     today     
</pre>
</div>
</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>In this case we see that running, run and ran have the same lemma (12767647472892411841)</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span> 
</pre></div>

    </div>
</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="k">def</span> <span class="nf">show_lemmas</span><span class="p">(</span><span class="n">text</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">token</span> <span class="ow">in</span> <span class="n">text</span><span class="p">:</span>
        <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;</span><span class="si">{</span><span class="n">token</span><span class="o">.</span><span class="n">text</span><span class="si">:{</span><span class="mi">12</span><span class="si">}}</span><span class="s1"> </span><span class="si">{</span><span class="n">token</span><span class="o">.</span><span class="n">pos_</span><span class="si">:{</span><span class="mi">6</span><span class="si">}}</span><span class="s1"> </span><span class="si">{</span><span class="n">token</span><span class="o">.</span><span class="n">lemma</span><span class="si">:</span><span class="s1">&lt;</span><span class="si">{</span><span class="mi">22</span><span class="si">}}</span><span class="s1"> </span><span class="si">{</span><span class="n">token</span><span class="o">.</span><span class="n">lemma_</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">doc2</span> <span class="o">=</span> <span class="n">nlp</span><span class="p">(</span><span class="sa">u</span><span class="s2">&quot;I saw eighteen mice today!&quot;</span><span class="p">)</span>

<span class="n">show_lemmas</span><span class="p">(</span><span class="n">doc2</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>I            PRON   4690420944186131903    I
saw          VERB   11925638236994514241   see
eighteen     NUM    9609336664675087640    eighteen
mice         NOUN   1384165645700560590    mouse
today        NOUN   11042482332948150395   today
!            PUNCT  17494803046312582752   !
</pre>
</div>
</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">doc3</span> <span class="o">=</span> <span class="n">nlp</span><span class="p">(</span><span class="sa">u</span><span class="s2">&quot;I am meeting him tomorrow at the meeting.&quot;</span><span class="p">)</span>

<span class="n">show_lemmas</span><span class="p">(</span><span class="n">doc3</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>I            PRON   4690420944186131903    I
am           AUX    10382539506755952630   be
meeting      VERB   6880656908171229526    meet
him          PRON   1655312771067108281    he
tomorrow     NOUN   3573583789758258062    tomorrow
at           ADP    11667289587015813222   at
the          DET    7425985699627899538    the
meeting      NOUN   14798207169164081740   meeting
.            PUNCT  12646065887601541794   .
</pre>
</div>
</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Here we see how meeting is correctly tagged as a noun and a verb</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">doc4</span> <span class="o">=</span> <span class="n">nlp</span><span class="p">(</span><span class="sa">u</span><span class="s2">&quot;That&#39;s an enormous automobile&quot;</span><span class="p">)</span>

<span class="n">show_lemmas</span><span class="p">(</span><span class="n">doc4</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>That         PRON   4380130941430378203    that
&#39;s           AUX    10382539506755952630   be
an           DET    15099054000809333061   an
enormous     ADJ    17917224542039855524   enormous
automobile   NOUN   7211811266693931283    automobile
</pre>
</div>
</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p><font color="green">Note that lemmatization does *not* reduce words to their most basic synonym - that is, `enormous` doesn't become `big` and `automobile` doesn't become `car`.</font></p>

</div>
</div>
</div>
</div>]]></content><author><name></name></author><category term="Spacy" /><category term="NLP-Chapter-2" /><category term="lemma" /><summary type="html"><![CDATA[The post explains the Lemmatization]]></summary></entry><entry><title type="html">2.3 Stemming</title><link href="https://vicky-crasto.github.io/Learn-Project-Language/nltk/stemming/nlp-chapter-2/2022/07/01/2-3-Stemming.html" rel="alternate" type="text/html" title="2.3 Stemming" /><published>2022-07-01T00:00:00-05:00</published><updated>2022-07-01T00:00:00-05:00</updated><id>https://vicky-crasto.github.io/Learn-Project-Language/nltk/stemming/nlp-chapter-2/2022/07/01/2-3-Stemming</id><content type="html" xml:base="https://vicky-crasto.github.io/Learn-Project-Language/nltk/stemming/nlp-chapter-2/2022/07/01/2-3-Stemming.html"><![CDATA[<!--
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: _notebooks/2022-07-01-2-3-Stemming.ipynb
-->

<div class="container" id="notebook-container">
        
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Stemming is the process of removing a part of a word, or reducing a word to its stem or root.</p>

</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="Porter-Stemmer">Porter Stemmer<a class="anchor-link" href="#Porter-Stemmer"> </a></h2>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>One of the most common - and effective - stemming tools is <a href="https://tartarus.org/martin/PorterStemmer/"><em>Porter's Algorithm</em></a> developed by Martin Porter in <a href="https://tartarus.org/martin/PorterStemmer/def.txt">1980</a>. The algorithm employs five phases of word reduction, each with its own set of mapping rules. In the first phase, simple suffix mapping rules are defined, such as:</p>

</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p><img src="https://miro.medium.com/max/930/1*EzaepeAsQpa8SyEc1h9lSA.png" alt="" /></p>

</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>From a given set of stemming rules only one rule is applied, based on the longest suffix S1. Thus, <code>caresses</code> reduces to <code>caress</code> but not <code>cares</code>.</p>
<p>More sophisticated phases consider the length/complexity of the word before applying a rule. For example:</p>

</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p><img src="https://miro.medium.com/max/1719/1*2cUR76NeWoPMiFsur0hQtw.png" alt="" /></p>

</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="Porter-stemmer-using-NLKT">Porter stemmer using NLKT<a class="anchor-link" href="#Porter-stemmer-using-NLKT"> </a></h2>
</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="kn">import</span> <span class="nn">nltk</span>

<span class="kn">from</span> <span class="nn">nltk.stem.porter</span> <span class="kn">import</span> <span class="o">*</span>
</pre></div>

    </div>
</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">p_stemmer</span> <span class="o">=</span> <span class="n">PorterStemmer</span><span class="p">()</span>
</pre></div>

    </div>
</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">words</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;run&#39;</span><span class="p">,</span><span class="s1">&#39;runner&#39;</span><span class="p">,</span><span class="s1">&#39;running&#39;</span><span class="p">,</span><span class="s1">&#39;ran&#39;</span><span class="p">,</span><span class="s1">&#39;runs&#39;</span><span class="p">,</span><span class="s1">&#39;easily&#39;</span><span class="p">,</span><span class="s1">&#39;fairly&#39;</span><span class="p">]</span>
</pre></div>

    </div>
</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">words</span><span class="p">:</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">word</span><span class="o">+</span><span class="s1">&#39;  ---&gt; &#39;</span><span class="o">+</span><span class="n">p_stemmer</span><span class="o">.</span><span class="n">stem</span><span class="p">(</span><span class="n">word</span><span class="p">))</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>run  ---&gt; run
runner  ---&gt; runner
running  ---&gt; run
ran  ---&gt; ran
runs  ---&gt; run
easily  ---&gt; easili
fairly  ---&gt; fairli
</pre>
</div>
</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="Snowball-Stemmer">Snowball Stemmer<a class="anchor-link" href="#Snowball-Stemmer"> </a></h2>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>This is somewhat of a misnomer, as Snowball is the name of a stemming language developed by Martin Porter. The algorithm used here is more acurately called the "English Stemmer" or "Porter2 Stemmer". It offers a slight improvement over the original Porter stemmer, both in logic and speed. Since <strong>nltk</strong> uses the name SnowballStemmer, we'll use it here.</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="kn">from</span> <span class="nn">nltk.stem.snowball</span> <span class="kn">import</span> <span class="n">SnowballStemmer</span>

<span class="c1"># The Snowball Stemmer requires that you pass a language parameter</span>
<span class="n">s_stemmer</span> <span class="o">=</span> <span class="n">SnowballStemmer</span><span class="p">(</span><span class="n">language</span><span class="o">=</span><span class="s1">&#39;english&#39;</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">words</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;run&#39;</span><span class="p">,</span><span class="s1">&#39;runner&#39;</span><span class="p">,</span><span class="s1">&#39;running&#39;</span><span class="p">,</span><span class="s1">&#39;ran&#39;</span><span class="p">,</span><span class="s1">&#39;runs&#39;</span><span class="p">,</span><span class="s1">&#39;easily&#39;</span><span class="p">,</span><span class="s1">&#39;fairly&#39;</span><span class="p">]</span>
<span class="c1"># words = [&#39;generous&#39;,&#39;generation&#39;,&#39;generously&#39;,&#39;generate&#39;]</span>
</pre></div>

    </div>
</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">words</span><span class="p">:</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">word</span><span class="o">+</span><span class="s1">&#39; --&gt; &#39;</span><span class="o">+</span><span class="n">s_stemmer</span><span class="o">.</span><span class="n">stem</span><span class="p">(</span><span class="n">word</span><span class="p">))</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>run --&gt; run
runner --&gt; runner
running --&gt; run
ran --&gt; ran
runs --&gt; run
easily --&gt; easili
fairly --&gt; fair
</pre>
</div>
</div>

</div>
</div>

</div>
    

</div>]]></content><author><name></name></author><category term="NLTK" /><category term="stemming" /><category term="NLP-Chapter-2" /><summary type="html"><![CDATA[The post explains stemming and shows the implementation of Porter stemmer and snowball stemmer in NLTK]]></summary></entry><entry><title type="html">2.2 Tokenization</title><link href="https://vicky-crasto.github.io/Learn-Project-Language/spacy/nlp-chapter-2/2022/07/01/2-2-Tokenization.html" rel="alternate" type="text/html" title="2.2 Tokenization" /><published>2022-07-01T00:00:00-05:00</published><updated>2022-07-01T00:00:00-05:00</updated><id>https://vicky-crasto.github.io/Learn-Project-Language/spacy/nlp-chapter-2/2022/07/01/2-2-Tokenization</id><content type="html" xml:base="https://vicky-crasto.github.io/Learn-Project-Language/spacy/nlp-chapter-2/2022/07/01/2-2-Tokenization.html"><![CDATA[<!--
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: _notebooks/2022-07-01-2-2-Tokenization.ipynb
-->

<div class="container" id="notebook-container">
        
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>The first step of creating Doc object is breakdown the raw text into smaller pieces or tokens</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="kn">import</span> <span class="nn">spacy</span>
<span class="n">nlp</span> <span class="o">=</span> <span class="n">spacy</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="s1">&#39;en_core_web_sm&#39;</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">mystring</span> <span class="o">=</span> <span class="s1">&#39;&quot;We</span><span class="se">\&#39;</span><span class="s1">re moving to L.A.!&quot;&#39;</span>
<span class="nb">print</span><span class="p">(</span><span class="n">mystring</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>&#34;We&#39;re moving to L.A.!&#34;
</pre>
</div>
</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">doc</span> <span class="o">=</span> <span class="n">nlp</span><span class="p">(</span><span class="n">mystring</span><span class="p">)</span>

<span class="k">for</span> <span class="n">token</span> <span class="ow">in</span> <span class="n">doc</span><span class="p">:</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">token</span><span class="o">.</span><span class="n">text</span><span class="p">,</span> <span class="n">end</span> <span class="o">=</span> <span class="s2">&quot; | &quot;</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>&#34; | We | &#39;re | moving | to | L.A. | ! | &#34; | </pre>
</div>
</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Spacy follows the following sequence to break the text.</p>

</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p><img src="https://spacy.io/tokenization-9b27c0f6fe98dcb26239eba4d3ba1f3d.svg" alt="" /></p>

</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<ul>
<li><strong>Prefix</strong>:  Character(s) at the beginning &#9656; <code>$ ( “ ¿</code></li>
<li><strong>Suffix</strong>:  Character(s) at the end &#9656; <code>km ) , . ! ”</code></li>
<li><strong>Infix</strong>:   Character(s) in between &#9656; <code>- -- / ...</code></li>
<li><strong>Exception</strong>: Special-case rule to split a string into several tokens or prevent a token from being split when punctuation rules are applied &#9656; `St. U.S.</li>
</ul>
<p>Tokens are the basic building blocks of a Doc object - everything that helps us understand the meaning of the text is derived from tokens and their relationship to one another.</p>

</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="Prefixes,-Suffixes-and-Infixes">Prefixes, Suffixes and Infixes<a class="anchor-link" href="#Prefixes,-Suffixes-and-Infixes"> </a></h2>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>spaCy will isolate punctuation that does <em>not</em> form an integral part of a word. Quotation marks, commas, and punctuation at the end of a sentence will be assigned their own token. However, punctuation that exists as part of an email address, website or numerical value will be kept as part of the token.</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">doc2</span> <span class="o">=</span> <span class="n">nlp</span><span class="p">(</span><span class="sa">u</span><span class="s2">&quot;We&#39;re here to help! Send snail-mail, email support@oursite.com or visit us at http://www.oursite.com!&quot;</span><span class="p">)</span>

<span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">doc2</span><span class="p">:</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>We
&#39;re
here
to
help
!
Send
snail
-
mail
,
email
support@oursite.com
or
visit
us
at
http://www.oursite.com
!
</pre>
</div>
</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p><strong>Note</strong> - We see that dash, !, commas are assigned as seperate tokens. But email address and website and kept together.</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">doc3</span> <span class="o">=</span> <span class="n">nlp</span><span class="p">(</span><span class="sa">u</span><span class="s1">&#39;A 5km NYC cab ride costs $10.30&#39;</span><span class="p">)</span>

<span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">doc3</span><span class="p">:</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>A
5
km
NYC
cab
ride
costs
$
10.30
</pre>
</div>
</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Hence the dollar sign and amount are given seperate tokens.</p>

</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="Exceptions">Exceptions<a class="anchor-link" href="#Exceptions"> </a></h2>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Punctuation that exists as part of a known abbreviation will be kept as part of the token.</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">doc4</span> <span class="o">=</span> <span class="n">nlp</span><span class="p">(</span><span class="sa">u</span><span class="s2">&quot;Let&#39;s visit St. Louis in the U.S. next year.&quot;</span><span class="p">)</span>

<span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">doc4</span><span class="p">:</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>Let
&#39;s
visit
St.
Louis
in
the
U.S.
next
year
.
</pre>
</div>
</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>In this case we see abbrevation such St. and U.S are preseved in seperate tokens.</p>

</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h3 id="Counting-tokens">Counting tokens<a class="anchor-link" href="#Counting-tokens"> </a></h3>
</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="nb">len</span><span class="p">(</span><span class="n">doc</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">



<div class="output_text output_subarea output_execute_result">
<pre>8</pre>
</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h3 id="Counting-Vocab-Entrmies">Counting Vocab Entrmies<a class="anchor-link" href="#Counting-Vocab-Entrmies"> </a></h3>
</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="nb">len</span><span class="p">(</span><span class="n">doc</span><span class="o">.</span><span class="n">vocab</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">



<div class="output_text output_subarea output_execute_result">
<pre>802</pre>
</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="Retriving-tokens-by-index-position-and-slice">Retriving tokens by index position and slice<a class="anchor-link" href="#Retriving-tokens-by-index-position-and-slice"> </a></h2>
</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">doc5</span> <span class="o">=</span> <span class="n">nlp</span><span class="p">(</span><span class="sa">u</span><span class="s1">&#39;It is better to give than to receive.&#39;</span><span class="p">)</span>

<span class="c1">### Retrieve the third token:</span>
<span class="n">doc5</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">



<div class="output_text output_subarea output_execute_result">
<pre>better</pre>
</div>

</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">doc5</span><span class="p">[</span><span class="mi">2</span><span class="p">:</span><span class="mi">5</span><span class="p">]</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">



<div class="output_text output_subarea output_execute_result">
<pre>better to give</pre>
</div>

</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span> 
</pre></div>

    </div>
</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">doc6</span> <span class="o">=</span> <span class="n">nlp</span><span class="p">(</span><span class="sa">u</span><span class="s1">&#39;My dinner was horrible.&#39;</span><span class="p">)</span>
<span class="n">doc7</span> <span class="o">=</span> <span class="n">nlp</span><span class="p">(</span><span class="sa">u</span><span class="s1">&#39;Your dinner was delicious.&#39;</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">doc6</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="n">doc7</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_text output_error">
<pre>
<span class="ansi-red-intense-fg ansi-bold">---------------------------------------------------------------------------</span>
<span class="ansi-red-intense-fg ansi-bold">TypeError</span>                                 Traceback (most recent call last)
<span class="ansi-green-intense-fg ansi-bold">C:\Users\VICKY~1.CRA\AppData\Local\Temp/ipykernel_11844/3591796456.py</span> in <span class="ansi-cyan-fg">&lt;module&gt;</span>
<span class="ansi-green-intense-fg ansi-bold">----&gt; 1</span><span class="ansi-yellow-intense-fg ansi-bold"> </span>doc6<span class="ansi-yellow-intense-fg ansi-bold">[</span><span class="ansi-cyan-intense-fg ansi-bold">3</span><span class="ansi-yellow-intense-fg ansi-bold">]</span> <span class="ansi-yellow-intense-fg ansi-bold">=</span> doc7<span class="ansi-yellow-intense-fg ansi-bold">[</span><span class="ansi-cyan-intense-fg ansi-bold">3</span><span class="ansi-yellow-intense-fg ansi-bold">]</span>

<span class="ansi-red-intense-fg ansi-bold">TypeError</span>: &#39;spacy.tokens.doc.Doc&#39; object does not support item assignment</pre>
</div>
</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>In this case we are trying to replace horrible in doc6 with delicious from doc7. But it cannot be done.</p>

</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="Named-Entities">Named Entities<a class="anchor-link" href="#Named-Entities"> </a></h2>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>The language model recognizes that certain words are organizational names while others are locations, and still other combinations relate to money, dates, etc. Named entities are accessible through the <code>ents</code> property of a <code>Doc</code> object.</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">doc8</span> <span class="o">=</span> <span class="n">nlp</span><span class="p">(</span><span class="sa">u</span><span class="s1">&#39;Apple to build a Hong Kong factory for $6 million&#39;</span><span class="p">)</span>

<span class="k">for</span> <span class="n">token</span> <span class="ow">in</span> <span class="n">doc8</span><span class="p">:</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">token</span><span class="o">.</span><span class="n">text</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s1">&#39; | &#39;</span><span class="p">)</span>

<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">----&#39;</span><span class="p">)</span>

<span class="k">for</span> <span class="n">ent</span> <span class="ow">in</span> <span class="n">doc8</span><span class="o">.</span><span class="n">ents</span><span class="p">:</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">ent</span><span class="o">.</span><span class="n">text</span><span class="o">+</span><span class="s1">&#39; - &#39;</span><span class="o">+</span><span class="n">ent</span><span class="o">.</span><span class="n">label_</span><span class="o">+</span><span class="s1">&#39; - &#39;</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">spacy</span><span class="o">.</span><span class="n">explain</span><span class="p">(</span><span class="n">ent</span><span class="o">.</span><span class="n">label_</span><span class="p">)))</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>Apple | to | build | a | Hong | Kong | factory | for | $ | 6 | million | 
----
Hong Kong - GPE - Countries, cities, states
$6 million - MONEY - Monetary values, including unit
</pre>
</div>
</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span> 
</pre></div>

    </div>
</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p><code>Doc.noun_chunks</code> are another object property. <em>Noun chunks</em> are "base noun phrases" – flat phrases that have a noun as their head. You can think of noun chunks as a noun plus the words describing the noun – for example, in <a href="https://en.wikipedia.org/wiki/The_Purple_People_Eater">Sheb Wooley's 1958 song</a>, a <em>"one-eyed, one-horned, flying, purple people-eater"</em> would be one long noun chunk.</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">doc9</span> <span class="o">=</span> <span class="n">nlp</span><span class="p">(</span><span class="sa">u</span><span class="s2">&quot;Autonomous cars shift insurance liability toward manufacturers.&quot;</span><span class="p">)</span>

<span class="k">for</span> <span class="n">chunk</span> <span class="ow">in</span> <span class="n">doc9</span><span class="o">.</span><span class="n">noun_chunks</span><span class="p">:</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">chunk</span><span class="o">.</span><span class="n">text</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>Autonomous cars
insurance liability
manufacturers
</pre>
</div>
</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">doc10</span> <span class="o">=</span> <span class="n">nlp</span><span class="p">(</span><span class="sa">u</span><span class="s2">&quot;Red cars do not carry higher insurance rates.&quot;</span><span class="p">)</span>

<span class="k">for</span> <span class="n">chunk</span> <span class="ow">in</span> <span class="n">doc10</span><span class="o">.</span><span class="n">noun_chunks</span><span class="p">:</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">chunk</span><span class="o">.</span><span class="n">text</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>Red cars
higher insurance rates
</pre>
</div>
</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">doc11</span> <span class="o">=</span> <span class="n">nlp</span><span class="p">(</span><span class="sa">u</span><span class="s2">&quot;He was a one-eyed, one-horned, flying, purple people-eater.&quot;</span><span class="p">)</span>

<span class="k">for</span> <span class="n">chunk</span> <span class="ow">in</span> <span class="n">doc11</span><span class="o">.</span><span class="n">noun_chunks</span><span class="p">:</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">chunk</span><span class="o">.</span><span class="n">text</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>He
purple people-eater
</pre>
</div>
</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="Built-in-Visualizers">Built in Visualizers<a class="anchor-link" href="#Built-in-Visualizers"> </a></h2>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>spaCy includes a built-in visualization tool called <strong>displaCy</strong></p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="kn">from</span> <span class="nn">spacy</span> <span class="kn">import</span> <span class="n">displacy</span>

<span class="n">doc</span> <span class="o">=</span> <span class="n">nlp</span><span class="p">(</span><span class="sa">u</span><span class="s1">&#39;Apple is going to build a U.K. factory for $6 million.&#39;</span><span class="p">)</span>
<span class="n">displacy</span><span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="n">doc</span><span class="p">,</span> <span class="n">style</span><span class="o">=</span><span class="s1">&#39;dep&#39;</span><span class="p">,</span> <span class="n">jupyter</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">options</span><span class="o">=</span><span class="p">{</span><span class="s1">&#39;distance&#39;</span><span class="p">:</span> <span class="mi">120</span><span class="p">})</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea ">
<span class="tex2jax_ignore"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="en" id="d1535abab5ce486e804e3c2f47cef3c6-0" class="displacy" width="1490" height="377.0" direction="ltr" style="max-width: none; height: 377.0px; color: #000000; background: #ffffff; font-family: Arial; direction: ltr">
<text class="displacy-token" fill="currentColor" text-anchor="middle" y="287.0">
    <tspan class="displacy-word" fill="currentColor" x="50">Apple</tspan>
    <tspan class="displacy-tag" dy="2em" fill="currentColor" x="50">PROPN</tspan>
</text>

<text class="displacy-token" fill="currentColor" text-anchor="middle" y="287.0">
    <tspan class="displacy-word" fill="currentColor" x="170">is</tspan>
    <tspan class="displacy-tag" dy="2em" fill="currentColor" x="170">AUX</tspan>
</text>

<text class="displacy-token" fill="currentColor" text-anchor="middle" y="287.0">
    <tspan class="displacy-word" fill="currentColor" x="290">going</tspan>
    <tspan class="displacy-tag" dy="2em" fill="currentColor" x="290">VERB</tspan>
</text>

<text class="displacy-token" fill="currentColor" text-anchor="middle" y="287.0">
    <tspan class="displacy-word" fill="currentColor" x="410">to</tspan>
    <tspan class="displacy-tag" dy="2em" fill="currentColor" x="410">PART</tspan>
</text>

<text class="displacy-token" fill="currentColor" text-anchor="middle" y="287.0">
    <tspan class="displacy-word" fill="currentColor" x="530">build</tspan>
    <tspan class="displacy-tag" dy="2em" fill="currentColor" x="530">VERB</tspan>
</text>

<text class="displacy-token" fill="currentColor" text-anchor="middle" y="287.0">
    <tspan class="displacy-word" fill="currentColor" x="650">a</tspan>
    <tspan class="displacy-tag" dy="2em" fill="currentColor" x="650">DET</tspan>
</text>

<text class="displacy-token" fill="currentColor" text-anchor="middle" y="287.0">
    <tspan class="displacy-word" fill="currentColor" x="770">U.K.</tspan>
    <tspan class="displacy-tag" dy="2em" fill="currentColor" x="770">PROPN</tspan>
</text>

<text class="displacy-token" fill="currentColor" text-anchor="middle" y="287.0">
    <tspan class="displacy-word" fill="currentColor" x="890">factory</tspan>
    <tspan class="displacy-tag" dy="2em" fill="currentColor" x="890">NOUN</tspan>
</text>

<text class="displacy-token" fill="currentColor" text-anchor="middle" y="287.0">
    <tspan class="displacy-word" fill="currentColor" x="1010">for</tspan>
    <tspan class="displacy-tag" dy="2em" fill="currentColor" x="1010">ADP</tspan>
</text>

<text class="displacy-token" fill="currentColor" text-anchor="middle" y="287.0">
    <tspan class="displacy-word" fill="currentColor" x="1130">$</tspan>
    <tspan class="displacy-tag" dy="2em" fill="currentColor" x="1130">SYM</tspan>
</text>

<text class="displacy-token" fill="currentColor" text-anchor="middle" y="287.0">
    <tspan class="displacy-word" fill="currentColor" x="1250">6</tspan>
    <tspan class="displacy-tag" dy="2em" fill="currentColor" x="1250">NUM</tspan>
</text>

<text class="displacy-token" fill="currentColor" text-anchor="middle" y="287.0">
    <tspan class="displacy-word" fill="currentColor" x="1370">million.</tspan>
    <tspan class="displacy-tag" dy="2em" fill="currentColor" x="1370">NUM</tspan>
</text>

<g class="displacy-arrow">
    <path class="displacy-arc" id="arrow-d1535abab5ce486e804e3c2f47cef3c6-0-0" stroke-width="2px" d="M70,242.0 C70,122.0 280.0,122.0 280.0,242.0" fill="none" stroke="currentColor" />
    <text dy="1.25em" style="font-size: 0.8em; letter-spacing: 1px">
        <textPath xlink:href="#arrow-d1535abab5ce486e804e3c2f47cef3c6-0-0" class="displacy-label" startOffset="50%" side="left" fill="currentColor" text-anchor="middle">nsubj</textPath>
    </text>
    <path class="displacy-arrowhead" d="M70,244.0 L62,232.0 78,232.0" fill="currentColor" />
</g>

<g class="displacy-arrow">
    <path class="displacy-arc" id="arrow-d1535abab5ce486e804e3c2f47cef3c6-0-1" stroke-width="2px" d="M190,242.0 C190,182.0 275.0,182.0 275.0,242.0" fill="none" stroke="currentColor" />
    <text dy="1.25em" style="font-size: 0.8em; letter-spacing: 1px">
        <textPath xlink:href="#arrow-d1535abab5ce486e804e3c2f47cef3c6-0-1" class="displacy-label" startOffset="50%" side="left" fill="currentColor" text-anchor="middle">aux</textPath>
    </text>
    <path class="displacy-arrowhead" d="M190,244.0 L182,232.0 198,232.0" fill="currentColor" />
</g>

<g class="displacy-arrow">
    <path class="displacy-arc" id="arrow-d1535abab5ce486e804e3c2f47cef3c6-0-2" stroke-width="2px" d="M430,242.0 C430,182.0 515.0,182.0 515.0,242.0" fill="none" stroke="currentColor" />
    <text dy="1.25em" style="font-size: 0.8em; letter-spacing: 1px">
        <textPath xlink:href="#arrow-d1535abab5ce486e804e3c2f47cef3c6-0-2" class="displacy-label" startOffset="50%" side="left" fill="currentColor" text-anchor="middle">aux</textPath>
    </text>
    <path class="displacy-arrowhead" d="M430,244.0 L422,232.0 438,232.0" fill="currentColor" />
</g>

<g class="displacy-arrow">
    <path class="displacy-arc" id="arrow-d1535abab5ce486e804e3c2f47cef3c6-0-3" stroke-width="2px" d="M310,242.0 C310,122.0 520.0,122.0 520.0,242.0" fill="none" stroke="currentColor" />
    <text dy="1.25em" style="font-size: 0.8em; letter-spacing: 1px">
        <textPath xlink:href="#arrow-d1535abab5ce486e804e3c2f47cef3c6-0-3" class="displacy-label" startOffset="50%" side="left" fill="currentColor" text-anchor="middle">xcomp</textPath>
    </text>
    <path class="displacy-arrowhead" d="M520.0,244.0 L528.0,232.0 512.0,232.0" fill="currentColor" />
</g>

<g class="displacy-arrow">
    <path class="displacy-arc" id="arrow-d1535abab5ce486e804e3c2f47cef3c6-0-4" stroke-width="2px" d="M670,242.0 C670,122.0 880.0,122.0 880.0,242.0" fill="none" stroke="currentColor" />
    <text dy="1.25em" style="font-size: 0.8em; letter-spacing: 1px">
        <textPath xlink:href="#arrow-d1535abab5ce486e804e3c2f47cef3c6-0-4" class="displacy-label" startOffset="50%" side="left" fill="currentColor" text-anchor="middle">det</textPath>
    </text>
    <path class="displacy-arrowhead" d="M670,244.0 L662,232.0 678,232.0" fill="currentColor" />
</g>

<g class="displacy-arrow">
    <path class="displacy-arc" id="arrow-d1535abab5ce486e804e3c2f47cef3c6-0-5" stroke-width="2px" d="M790,242.0 C790,182.0 875.0,182.0 875.0,242.0" fill="none" stroke="currentColor" />
    <text dy="1.25em" style="font-size: 0.8em; letter-spacing: 1px">
        <textPath xlink:href="#arrow-d1535abab5ce486e804e3c2f47cef3c6-0-5" class="displacy-label" startOffset="50%" side="left" fill="currentColor" text-anchor="middle">compound</textPath>
    </text>
    <path class="displacy-arrowhead" d="M790,244.0 L782,232.0 798,232.0" fill="currentColor" />
</g>

<g class="displacy-arrow">
    <path class="displacy-arc" id="arrow-d1535abab5ce486e804e3c2f47cef3c6-0-6" stroke-width="2px" d="M550,242.0 C550,62.0 885.0,62.0 885.0,242.0" fill="none" stroke="currentColor" />
    <text dy="1.25em" style="font-size: 0.8em; letter-spacing: 1px">
        <textPath xlink:href="#arrow-d1535abab5ce486e804e3c2f47cef3c6-0-6" class="displacy-label" startOffset="50%" side="left" fill="currentColor" text-anchor="middle">dobj</textPath>
    </text>
    <path class="displacy-arrowhead" d="M885.0,244.0 L893.0,232.0 877.0,232.0" fill="currentColor" />
</g>

<g class="displacy-arrow">
    <path class="displacy-arc" id="arrow-d1535abab5ce486e804e3c2f47cef3c6-0-7" stroke-width="2px" d="M550,242.0 C550,2.0 1010.0,2.0 1010.0,242.0" fill="none" stroke="currentColor" />
    <text dy="1.25em" style="font-size: 0.8em; letter-spacing: 1px">
        <textPath xlink:href="#arrow-d1535abab5ce486e804e3c2f47cef3c6-0-7" class="displacy-label" startOffset="50%" side="left" fill="currentColor" text-anchor="middle">prep</textPath>
    </text>
    <path class="displacy-arrowhead" d="M1010.0,244.0 L1018.0,232.0 1002.0,232.0" fill="currentColor" />
</g>

<g class="displacy-arrow">
    <path class="displacy-arc" id="arrow-d1535abab5ce486e804e3c2f47cef3c6-0-8" stroke-width="2px" d="M1150,242.0 C1150,122.0 1360.0,122.0 1360.0,242.0" fill="none" stroke="currentColor" />
    <text dy="1.25em" style="font-size: 0.8em; letter-spacing: 1px">
        <textPath xlink:href="#arrow-d1535abab5ce486e804e3c2f47cef3c6-0-8" class="displacy-label" startOffset="50%" side="left" fill="currentColor" text-anchor="middle">quantmod</textPath>
    </text>
    <path class="displacy-arrowhead" d="M1150,244.0 L1142,232.0 1158,232.0" fill="currentColor" />
</g>

<g class="displacy-arrow">
    <path class="displacy-arc" id="arrow-d1535abab5ce486e804e3c2f47cef3c6-0-9" stroke-width="2px" d="M1270,242.0 C1270,182.0 1355.0,182.0 1355.0,242.0" fill="none" stroke="currentColor" />
    <text dy="1.25em" style="font-size: 0.8em; letter-spacing: 1px">
        <textPath xlink:href="#arrow-d1535abab5ce486e804e3c2f47cef3c6-0-9" class="displacy-label" startOffset="50%" side="left" fill="currentColor" text-anchor="middle">compound</textPath>
    </text>
    <path class="displacy-arrowhead" d="M1270,244.0 L1262,232.0 1278,232.0" fill="currentColor" />
</g>

<g class="displacy-arrow">
    <path class="displacy-arc" id="arrow-d1535abab5ce486e804e3c2f47cef3c6-0-10" stroke-width="2px" d="M1030,242.0 C1030,62.0 1365.0,62.0 1365.0,242.0" fill="none" stroke="currentColor" />
    <text dy="1.25em" style="font-size: 0.8em; letter-spacing: 1px">
        <textPath xlink:href="#arrow-d1535abab5ce486e804e3c2f47cef3c6-0-10" class="displacy-label" startOffset="50%" side="left" fill="currentColor" text-anchor="middle">pobj</textPath>
    </text>
    <path class="displacy-arrowhead" d="M1365.0,244.0 L1373.0,232.0 1357.0,232.0" fill="currentColor" />
</g>
</svg></span>
</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>The optional <code>'distance'</code> argument sets the distance between tokens. If the distance is made too small, text that appears beneath short arrows may become too compressed to read.</p>

</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="Visualizing-the-entity-recognizer">Visualizing the entity recognizer<a class="anchor-link" href="#Visualizing-the-entity-recognizer"> </a></h2>
</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">doc</span> <span class="o">=</span> <span class="n">nlp</span><span class="p">(</span><span class="sa">u</span><span class="s1">&#39;Over the last quarter Apple sold nearly 20 thousand iPods for a profit of $6 million.&#39;</span><span class="p">)</span>
<span class="n">displacy</span><span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="n">doc</span><span class="p">,</span> <span class="n">style</span><span class="o">=</span><span class="s1">&#39;ent&#39;</span><span class="p">,</span> <span class="n">jupyter</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea ">
<span class="tex2jax_ignore"><div class="entities" style="line-height: 2.5; direction: ltr">Over 
<mark class="entity" style="background: #bfe1d9; padding: 0.45em 0.6em; margin: 0 0.25em; line-height: 1; border-radius: 0.35em;">
    the last quarter
    <span style="font-size: 0.8em; font-weight: bold; line-height: 1; border-radius: 0.35em; vertical-align: middle; margin-left: 0.5rem">DATE</span>
</mark>
 
<mark class="entity" style="background: #7aecec; padding: 0.45em 0.6em; margin: 0 0.25em; line-height: 1; border-radius: 0.35em;">
    Apple
    <span style="font-size: 0.8em; font-weight: bold; line-height: 1; border-radius: 0.35em; vertical-align: middle; margin-left: 0.5rem">ORG</span>
</mark>
 sold 
<mark class="entity" style="background: #e4e7d2; padding: 0.45em 0.6em; margin: 0 0.25em; line-height: 1; border-radius: 0.35em;">
    nearly 20 thousand
    <span style="font-size: 0.8em; font-weight: bold; line-height: 1; border-radius: 0.35em; vertical-align: middle; margin-left: 0.5rem">CARDINAL</span>
</mark>
 
<mark class="entity" style="background: #bfeeb7; padding: 0.45em 0.6em; margin: 0 0.25em; line-height: 1; border-radius: 0.35em;">
    iPods
    <span style="font-size: 0.8em; font-weight: bold; line-height: 1; border-radius: 0.35em; vertical-align: middle; margin-left: 0.5rem">PRODUCT</span>
</mark>
 for a profit of 
<mark class="entity" style="background: #e4e7d2; padding: 0.45em 0.6em; margin: 0 0.25em; line-height: 1; border-radius: 0.35em;">
    $6 million
    <span style="font-size: 0.8em; font-weight: bold; line-height: 1; border-radius: 0.35em; vertical-align: middle; margin-left: 0.5rem">MONEY</span>
</mark>
.</div></span>
</div>

</div>

</div>
</div>

</div>
    

</div>]]></content><author><name></name></author><category term="Spacy" /><category term="NLP-Chapter-2" /><summary type="html"><![CDATA[The post explains tokenization and the various options available in spacy with regard to it]]></summary></entry><entry><title type="html">2.1 Spacy Basics</title><link href="https://vicky-crasto.github.io/Learn-Project-Language/spacy/nlp-chapter-2/2022/07/01/2-1-Spacy-Basics.html" rel="alternate" type="text/html" title="2.1 Spacy Basics" /><published>2022-07-01T00:00:00-05:00</published><updated>2022-07-01T00:00:00-05:00</updated><id>https://vicky-crasto.github.io/Learn-Project-Language/spacy/nlp-chapter-2/2022/07/01/2-1-Spacy-Basics</id><content type="html" xml:base="https://vicky-crasto.github.io/Learn-Project-Language/spacy/nlp-chapter-2/2022/07/01/2-1-Spacy-Basics.html"><![CDATA[<!--
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: _notebooks/2022-07-01-2-1-Spacy-Basics.ipynb
-->

<div class="container" id="notebook-container">
        
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="Installation-and-setup">Installation and setup<a class="anchor-link" href="#Installation-and-setup"> </a></h2>
</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">pip</span> <span class="n">install</span> <span class="o">-</span><span class="n">U</span> <span class="n">spacy</span>
</pre></div>

    </div>
</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h3 id="Downloading-spacy-vocab-library">Downloading spacy vocab library<a class="anchor-link" href="#Downloading-spacy-vocab-library"> </a></h3>
</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="o">!</span>python -m spacy download en
</pre></div>

    </div>
</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h3 id="Loading-Spacy">Loading Spacy<a class="anchor-link" href="#Loading-Spacy"> </a></h3>
</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="kn">import</span> <span class="nn">spacy</span>
<span class="n">nlp</span> <span class="o">=</span> <span class="n">spacy</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="s1">&#39;en_core_web_sm&#39;</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p><strong>Creating a doc object and printing the different components of the token</strong></p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="c1">### Create a doc object</span>
<span class="n">doc</span> <span class="o">=</span> <span class="n">nlp</span><span class="p">(</span><span class="sa">u</span><span class="s1">&#39;Tesla is looking at buying U.S. startup for $6 million&#39;</span><span class="p">)</span>

<span class="c1">### Printing each token seperately</span>
<span class="k">for</span> <span class="n">token</span> <span class="ow">in</span> <span class="n">doc</span><span class="p">:</span>
    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;</span><span class="si">{</span><span class="n">token</span><span class="o">.</span><span class="n">text</span><span class="si">:</span><span class="s1">&gt;</span><span class="si">{</span><span class="mi">10</span><span class="si">}}</span><span class="s1"> </span><span class="si">{</span><span class="n">token</span><span class="o">.</span><span class="n">pos_</span><span class="si">:</span><span class="s1">&gt;</span><span class="si">{</span><span class="mi">10</span><span class="si">}}</span><span class="s1"> </span><span class="si">{</span><span class="n">token</span><span class="o">.</span><span class="n">dep_</span><span class="si">:</span><span class="s1">&gt;</span><span class="si">{</span><span class="mi">10</span><span class="si">}}</span><span class="s1">&#39;</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>     Tesla       NOUN      nsubj
        is        AUX        aux
   looking       VERB       ROOT
        at        ADP       prep
    buying       VERB      pcomp
      U.S.      PROPN   compound
   startup       NOUN       dobj
       for        ADP       prep
         $        SYM   quantmod
         6        NUM   compound
   million        NUM       pobj
</pre>
</div>
</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="Understanding-the-spacy-pipeline">Understanding the spacy pipeline<a class="anchor-link" href="#Understanding-the-spacy-pipeline"> </a></h2>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>When we run <code>nlp</code>, our text enters a <em>processing pipeline</em> that first breaks down the text and then performs a series of operations to tag, parse and describe the data.   Image source: <a href="https://spacy.io/usage/spacy-101#pipelines">https://spacy.io/usage/spacy-101#pipelines</a></p>

</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p><img src="https://spacy.io/pipeline-fde48da9b43661abcdf62ab70a546d71.svg" alt="" /></p>

</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<table class="_59fbd182">
<thead>
<tr class="_8a68569b">
<th class="_2e8d2972">NAME</th>
<th class="_2e8d2972">COMPONENT</th>
<th class="_2e8d2972">CREATES</th>
<th class="_2e8d2972">DESCRIPTION</th>
</tr>
</thead>
<tbody>
<tr class="_8a68569b">
<td class="_5c99da9a"><strong>tokenizer</strong></td>
<td class="_5c99da9a"><a class="_46224d00 _8609c0be caf1ba1d" href="https://spacy.io/api/tokenizer"><code class="_1d7c6046">Tokenizer</code></a></td>
<td class="_5c99da9a"><code class="_1d7c6046">Doc</code></td>
<td class="_5c99da9a">Segment text into tokens.</td>
</tr>
<tr class="_8a68569b">
<td class="_5c99da9a"><strong>tagger</strong></td>
<td class="_5c99da9a"><a class="_46224d00 _8609c0be caf1ba1d" href="https://spacy.io/api/tagger"><code class="_1d7c6046">Tagger</code></a></td>
<td class="_5c99da9a"><code class="_1d7c6046">Token.tag</code></td>
<td class="_5c99da9a">Assign part-of-speech tags.</td>
</tr>
<tr class="_8a68569b">
<td class="_5c99da9a"><strong>parser</strong></td>
<td class="_5c99da9a"><a class="_46224d00 _8609c0be caf1ba1d" href="https://spacy.io/api/dependencyparser"><code class="_1d7c6046">DependencyParser</code></a></td>
<td class="_5c99da9a"><code class="_1d7c6046">Token.head</code>,&nbsp;<code class="_1d7c6046">Token.dep</code>,&nbsp;<code class="_1d7c6046">Doc.sents</code>,&nbsp;<code class="_1d7c6046">Doc.noun_chunks</code></td>
<td class="_5c99da9a">Assign dependency labels.</td>
</tr>
<tr class="_8a68569b">
<td class="_5c99da9a"><strong>ner</strong></td>
<td class="_5c99da9a"><a class="_46224d00 _8609c0be caf1ba1d" href="https://spacy.io/api/entityrecognizer"><code class="_1d7c6046">EntityRecognizer</code></a></td>
<td class="_5c99da9a"><code class="_1d7c6046">Doc.ents</code>,&nbsp;<code class="_1d7c6046">Token.ent_iob</code>,&nbsp;<code class="_1d7c6046">Token.ent_type</code></td>
<td class="_5c99da9a">Detect and label named entities.</td>
</tr>
<tr class="_8a68569b">
<td class="_5c99da9a"><strong>lemmatizer</strong></td>
<td class="_5c99da9a"><a class="_46224d00 _8609c0be caf1ba1d" href="https://spacy.io/api/lemmatizer"><code class="_1d7c6046">Lemmatizer</code></a></td>
<td class="_5c99da9a"><code class="_1d7c6046">Token.lemma</code></td>
<td class="_5c99da9a">Assign base forms.</td>
</tr>
<tr class="_8a68569b">
<td class="_5c99da9a"><strong>textcat</strong></td>
<td class="_5c99da9a"><a class="_46224d00 _8609c0be caf1ba1d" href="https://spacy.io/api/textcategorizer"><code class="_1d7c6046">TextCategorizer</code></a></td>
<td class="_5c99da9a"><code class="_1d7c6046">Doc.cats</code></td>
<td class="_5c99da9a">Assign document labels.</td>
</tr>
<tr class="_8a68569b">
<td class="_5c99da9a"><strong>custom</strong></td>
<td class="_5c99da9a"><a class="_46224d00" href="https://spacy.io/usage/processing-pipelines#custom-components">custom components</a></td>
<td class="_5c99da9a"><code class="_1d7c6046">Doc._.xxx</code>,&nbsp;<code class="_1d7c6046">Token._.xxx</code>,&nbsp;<code class="_1d7c6046">Span._.xxx</code></td>
<td class="_5c99da9a">Assign custom attributes, methods or properties.</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">nlp</span><span class="o">.</span><span class="n">pipeline</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">



<div class="output_text output_subarea output_execute_result">
<pre>[(&#39;tok2vec&#39;, &lt;spacy.pipeline.tok2vec.Tok2Vec at 0x23264bfa220&gt;),
 (&#39;tagger&#39;, &lt;spacy.pipeline.tagger.Tagger at 0x23264bfae80&gt;),
 (&#39;parser&#39;, &lt;spacy.pipeline.dep_parser.DependencyParser at 0x23264a554a0&gt;),
 (&#39;attribute_ruler&#39;,
  &lt;spacy.pipeline.attributeruler.AttributeRuler at 0x23264cb5780&gt;),
 (&#39;lemmatizer&#39;, &lt;spacy.lang.en.lemmatizer.EnglishLemmatizer at 0x23264cc8780&gt;),
 (&#39;ner&#39;, &lt;spacy.pipeline.ner.EntityRecognizer at 0x23264a55350&gt;)]</pre>
</div>

</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">nlp</span><span class="o">.</span><span class="n">pipe_names</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">



<div class="output_text output_subarea output_execute_result">
<pre>[&#39;tok2vec&#39;, &#39;tagger&#39;, &#39;parser&#39;, &#39;attribute_ruler&#39;, &#39;lemmatizer&#39;, &#39;ner&#39;]</pre>
</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="Tokenization">Tokenization<a class="anchor-link" href="#Tokenization"> </a></h2>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Tokenization is breaking the raw text into small chunks. Tokenization breaks the raw text into words, sentences called tokens. These tokens help in understanding the context or developing the model for the NLP. The tokenization helps in interpreting the meaning of the text by analyzing the sequence of the words.</p>
<p><em>Source: <a href="https://towardsdatascience.com/tokenization-for-natural-language-processing-a179a891bad4s">https://towardsdatascience.com/tokenization-for-natural-language-processing-a179a891bad4s</a></em></p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">doc2</span> <span class="o">=</span> <span class="n">nlp</span><span class="p">(</span><span class="sa">u</span><span class="s2">&quot;Apple isn&#39;t  looking into buying startups.&quot;</span><span class="p">)</span>
<span class="k">for</span> <span class="n">token</span> <span class="ow">in</span> <span class="n">doc2</span><span class="p">:</span>
    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;</span><span class="si">{</span><span class="n">token</span><span class="o">.</span><span class="n">text</span><span class="si">:</span><span class="s1">&gt;</span><span class="si">{</span><span class="mi">10</span><span class="si">}}</span><span class="s1"> </span><span class="si">{</span><span class="n">token</span><span class="o">.</span><span class="n">pos_</span><span class="si">:</span><span class="s1">&gt;</span><span class="si">{</span><span class="mi">10</span><span class="si">}}</span><span class="s1"> </span><span class="si">{</span><span class="n">token</span><span class="o">.</span><span class="n">dep_</span><span class="si">:</span><span class="s1">&gt;</span><span class="si">{</span><span class="mi">10</span><span class="si">}}</span><span class="s1">&#39;</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>     Apple      PROPN      nsubj
        is        AUX        aux
       n&#39;t       PART        neg
                SPACE        dep
   looking       VERB       ROOT
      into        ADP       prep
    buying       VERB      pcomp
  startups       NOUN       dobj
         .      PUNCT      punct
</pre>
</div>
</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p><strong>Things to take note</strong></p>
<ul>
<li>Spacy is able to recognize the root verb and the negation, hence it has split is'nt into two tokens</li>
<li>Spaces and peroid are assigned as tokens</li>
</ul>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="nb">type</span><span class="p">(</span><span class="n">doc2</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">



<div class="output_text output_subarea output_execute_result">
<pre>spacy.tokens.doc.Doc</pre>
</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>doc2 is spacy object and contains information of each token in the text.</p>

</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="Part-of-Speech-Tagging(POS)">Part of Speech Tagging(POS)<a class="anchor-link" href="#Part-of-Speech-Tagging(POS)"> </a></h2>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>In the above example we see the output has clearly label Apple as pronoun, looking as a verb etc.These are parts of speech.</p>
<p>For a full list of POS Tags visit <a href="https://spacy.io/api/annotation#pos-tagging">https://spacy.io/api/annotation#pos-tagging</a></p>

</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="Dependencies">Dependencies<a class="anchor-link" href="#Dependencies"> </a></h2>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>We also looked at the syntactic dependencies assigned to each token. <code>Tesla</code> is identified as an <code>nsubj</code> or the <strong><em>nominal subject</em></strong> of the sentence.</p>
<p>For a full list of Syntactic Dependencies visit <a href="https://spacy.io/api/annotation#dependency-parsing">https://spacy.io/api/annotation#dependency-parsing</a>
<br />A good explanation of typed dependencies can be found <a href="https://nlp.stanford.edu/software/dependencies_manual.pdf">here</a></p>

</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p><strong>Full name of a tag used in spacy</strong></p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">spacy</span><span class="o">.</span><span class="n">explain</span><span class="p">(</span><span class="s1">&#39;PROPN&#39;</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">



<div class="output_text output_subarea output_execute_result">
<pre>&#39;proper noun&#39;</pre>
</div>

</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">spacy</span><span class="o">.</span><span class="n">explain</span><span class="p">(</span><span class="s1">&#39;nsubj&#39;</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">



<div class="output_text output_subarea output_execute_result">
<pre>&#39;nominal subject&#39;</pre>
</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="Additional-Token-Attributes">Additional Token Attributes<a class="anchor-link" href="#Additional-Token-Attributes"> </a></h2>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<table>
<thead><tr>
<th style="text-align:left">Tag</th>
<th style="text-align:center">Description</th>
<th style="text-align:left">doc2[0].tag</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>.text</code></td>
<td style="text-align:center">The original word text<!-- .element: style="text-align:left;" --></td>
<td style="text-align:left"><code>Tesla</code></td>
</tr>
<tr>
<td style="text-align:left"><code>.lemma_</code></td>
<td style="text-align:center">The base form of the word</td>
<td style="text-align:left"><code>tesla</code></td>
</tr>
<tr>
<td style="text-align:left"><code>.pos_</code></td>
<td style="text-align:center">The simple part-of-speech tag</td>
<td style="text-align:left"><code>PROPN</code>/<code>proper noun</code></td>
</tr>
<tr>
<td style="text-align:left"><code>.tag_</code></td>
<td style="text-align:center">The detailed part-of-speech tag</td>
<td style="text-align:left"><code>NNP</code>/<code>noun, proper singular</code></td>
</tr>
<tr>
<td style="text-align:left"><code>.shape_</code></td>
<td style="text-align:center">The word shape – capitalization, punctuation, digits</td>
<td style="text-align:left"><code>Xxxxx</code></td>
</tr>
<tr>
<td style="text-align:left"><code>.is_alpha</code></td>
<td style="text-align:center">Is the token an alpha character?</td>
<td style="text-align:left"><code>True</code></td>
</tr>
<tr>
<td style="text-align:left"><code>.is_stop</code></td>
<td style="text-align:center">Is the token part of a stop list, i.e. the most common words of the language?</td>
<td style="text-align:left"><code>False</code></td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="nb">print</span><span class="p">(</span><span class="n">doc2</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">.</span><span class="n">text</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">doc2</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">.</span><span class="n">lemma_</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>looking
look
</pre>
</div>
</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="nb">print</span><span class="p">(</span><span class="n">doc2</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">text</span> <span class="o">+</span> <span class="s1">&#39;: &#39;</span> <span class="o">+</span> <span class="n">doc2</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">shape_</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">doc</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">.</span><span class="n">text</span> <span class="o">+</span> <span class="s1">&#39;: &#39;</span> <span class="o">+</span> <span class="n">doc</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">.</span><span class="n">shape_</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>Apple: Xxxxx
U.S.: X.X.
</pre>
</div>
</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span> 
</pre></div>

    </div>
</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Large Doc objects can be hard to work with at times. A <strong>span</strong> is a slice of Doc object in the form <code>Doc[start:stop]</code>.</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">doc3</span> <span class="o">=</span> <span class="n">nlp</span><span class="p">(</span><span class="sa">u</span><span class="s1">&#39;Although commmonly attributed to John Lennon from his song &quot;Beautiful Boy&quot;, </span><span class="se">\</span>
<span class="s1">the phrase &quot;Life is what happens to us while we are making other plans&quot; was written by </span><span class="se">\</span>
<span class="s1">cartoonist Allen Saunders and published in Reader</span><span class="se">\&#39;</span><span class="s1">s Digest in 1957, when Lennon was 17.&#39;</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">life_qoute</span> <span class="o">=</span> <span class="n">doc3</span><span class="p">[</span><span class="mi">16</span><span class="p">:</span><span class="mi">30</span><span class="p">]</span>
<span class="nb">print</span><span class="p">(</span><span class="n">life_qoute</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>&#34;Life is what happens to us while we are making other plans&#34;
</pre>
</div>
</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="nb">type</span><span class="p">(</span><span class="n">life_qoute</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">



<div class="output_text output_subarea output_execute_result">
<pre>spacy.tokens.span.Span</pre>
</div>

</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span> 
</pre></div>

    </div>
</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Certain tokens inside a Doc object may also receive a "start of sentence" tag. While this doesn't immediately build a list of sentences, these tags enable the generation of sentence segments through <code>Doc.sents</code>.</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">doc4</span> <span class="o">=</span> <span class="n">nlp</span><span class="p">(</span><span class="sa">u</span><span class="s1">&#39;This is the first sentence. This is another sentence. This is the last sentence.&#39;</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="k">for</span> <span class="n">sent</span> <span class="ow">in</span> <span class="n">doc4</span><span class="o">.</span><span class="n">sents</span><span class="p">:</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">sent</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>This is the first sentence.
This is another sentence.
This is the last sentence.
</pre>
</div>
</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">doc4</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="o">.</span><span class="n">is_sent_start</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">



<div class="output_text output_subarea output_execute_result">
<pre>True</pre>
</div>

</div>

</div>
</div>

</div>
    

</div>]]></content><author><name></name></author><category term="Spacy" /><category term="NLP-Chapter-2" /><summary type="html"><![CDATA[The post explains the basics of Spacy library used for NLP]]></summary></entry><entry><title type="html">1.5 Text Basics - Practice exercises</title><link href="https://vicky-crasto.github.io/Learn-Project-Language/pypdf2/pdf/nlp-chapter-1/2022/06/30/1-5-Python-Text-Basics-Practice.html" rel="alternate" type="text/html" title="1.5 Text Basics - Practice exercises" /><published>2022-06-30T00:00:00-05:00</published><updated>2022-06-30T00:00:00-05:00</updated><id>https://vicky-crasto.github.io/Learn-Project-Language/pypdf2/pdf/nlp-chapter-1/2022/06/30/1-5-Python-Text-Basics-Practice</id><content type="html" xml:base="https://vicky-crasto.github.io/Learn-Project-Language/pypdf2/pdf/nlp-chapter-1/2022/06/30/1-5-Python-Text-Basics-Practice.html"><![CDATA[<!--
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: _notebooks/2022-06-30-1-5-Python-Text-Basics-Practice.ipynb
-->

<div class="container" id="notebook-container">
        
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="f-Strings">f-Strings<a class="anchor-link" href="#f-Strings"> </a></h2><h4 id="1.-Print-an-f-string-that-displays-NLP-stands-for-Natural-Language-Processing-using-the-variables-provided.">1. Print an f-string that displays <code>NLP stands for Natural Language Processing</code> using the variables provided.<a class="anchor-link" href="#1.-Print-an-f-string-that-displays-NLP-stands-for-Natural-Language-Processing-using-the-variables-provided."> </a></h4>
</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">abbr</span> <span class="o">=</span> <span class="s1">&#39;NLP&#39;</span>
<span class="n">full_text</span> <span class="o">=</span> <span class="s1">&#39;Natural Language Processing&#39;</span>

<span class="c1">### Enter your code here:</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>NLP stands for Natural Language Processing
</pre>
</div>
</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p><strong>Solution</strong></p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">abbr</span> <span class="o">=</span> <span class="s1">&#39;NLP&#39;</span>
<span class="n">full_text</span> <span class="o">=</span> <span class="s1">&#39;Natural Language Processing&#39;</span>
<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;</span><span class="si">{</span><span class="n">abbr</span><span class="si">}</span><span class="s1"> stands for </span><span class="si">{</span><span class="n">full_text</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>NLP stands for Natural Language Processing
</pre>
</div>
</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="Files">Files<a class="anchor-link" href="#Files"> </a></h2><h4 id="2.-Create-a-file-in-the-current-working-directory-called-contacts.txt-by-running-the-cell-below:">2. Create a file in the current working directory called <code>contacts.txt</code> by running the cell below:<a class="anchor-link" href="#2.-Create-a-file-in-the-current-working-directory-called-contacts.txt-by-running-the-cell-below:"> </a></h4>
</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="o">%%writefile</span> contacts.txt
<span class="n">First_Name</span> <span class="n">Last_Name</span><span class="p">,</span> <span class="n">Title</span><span class="p">,</span> <span class="n">Extension</span><span class="p">,</span> <span class="n">Email</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>Overwriting contacts.txt
</pre>
</div>
</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p><strong>Solution</strong></p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="o">%%writefile</span> contacts.txt
<span class="n">First_Name</span> <span class="n">Last_Name</span><span class="p">,</span> <span class="n">Title</span><span class="p">,</span> <span class="n">Extension</span><span class="p">,</span> <span class="n">Email</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>Overwriting contacts.txt
</pre>
</div>
</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h4 id="3.-Open-the-file-and-use-.read()-to-save-the-contents-of-the-file-to-a-string-called-fields.--Make-sure-the-file-is-closed-at-the-end.">3. Open the file and use .read() to save the contents of the file to a string called <code>fields</code>.  Make sure the file is closed at the end.<a class="anchor-link" href="#3.-Open-the-file-and-use-.read()-to-save-the-contents-of-the-file-to-a-string-called-fields.--Make-sure-the-file-is-closed-at-the-end."> </a></h4>
</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="c1">### Write your code here:</span>
    
<span class="c1">### Run fields to see the contents of contacts.txt:</span>
<span class="n">fields</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">



<div class="output_text output_subarea output_execute_result">
<pre>&#39;First_Name Last_Name, Title, Extension, Email&#39;</pre>
</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p><strong>Solution</strong></p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s2">&quot;contacts.txt&quot;</span><span class="p">)</span> <span class="k">as</span> <span class="n">text</span><span class="p">:</span>
    <span class="n">fields</span> <span class="o">=</span> <span class="n">text</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
    
<span class="n">fields</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">



<div class="output_text output_subarea output_execute_result">
<pre>&#39;First_Name Last_Name, Title, Extension, Email\n&#39;</pre>
</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="Working-with-PDF-Files">Working with PDF Files<a class="anchor-link" href="#Working-with-PDF-Files"> </a></h2><h4 id="4.-Use-PyPDF2-to-open-the-file-Business_Proposal.pdf.-Extract-the-text-of-page-2.">4. Use PyPDF2 to open the file <code>Business_Proposal.pdf</code>. Extract the text of page 2.<a class="anchor-link" href="#4.-Use-PyPDF2-to-open-the-file-Business_Proposal.pdf.-Extract-the-text-of-page-2."> </a></h4>
</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="c1"># Open the file as a binary object</span>

<span class="c1"># Use PyPDF2 to read the text of the file</span>

<span class="c1"># Get the text from page 2 (CHALLENGE: Do this in one step!)</span>
<span class="n">page_two_text</span> <span class="o">=</span> 

<span class="c1"># Close the file</span>

<span class="c1"># Print the contents of page_two_text</span>
<span class="nb">print</span><span class="p">(</span><span class="n">page_two_text</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>AUTHORS:
 
Amy Baker, Finance Chair, x345, abaker@ourcompany.com
 
Chris Donaldson, Accounting Dir., x621, cdonaldson@ourcompany.com
 
Erin Freeman, Sr. VP, x879, efreeman@ourcompany.com
 

</pre>
</div>
</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p><strong>Solution</strong></p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="kn">import</span> <span class="nn">PyPDF2</span>

<span class="c1"># Open the file as a binary object</span>
<span class="n">pdf1</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s2">&quot;data_files/Business_Proposal.pdf&quot;</span><span class="p">,</span> <span class="s1">&#39;rb&#39;</span><span class="p">)</span>

<span class="c1"># Use PyPDF2 to read the text of the file</span>
<span class="n">pdf_reader</span> <span class="o">=</span> <span class="n">PyPDF2</span><span class="o">.</span><span class="n">PdfFileReader</span><span class="p">(</span><span class="n">pdf1</span><span class="p">)</span>

<span class="c1"># Get the text from page 2 (CHALLENGE: Do this in one step!)</span>
<span class="n">page_two_text</span> <span class="o">=</span> <span class="n">pdf_reader</span><span class="o">.</span><span class="n">getPage</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">extractText</span><span class="p">()</span>

<span class="c1"># Close the file</span>
<span class="n">pdf1</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>

<span class="c1"># Print the contents of page_two_text</span>
<span class="nb">print</span><span class="p">(</span><span class="n">page_two_text</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>AUTHORS:
 

Amy Baker, Finance Chair, x345, abaker@ourcompany.com
  

Chris Donaldson, Accounting Dir., x621, cdonaldson@ourcompany.com
  

Erin Freeman, Sr. VP, x879, efreeman@ourcompany.com
  
</pre>
</div>
</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="kn">import</span> <span class="nn">re</span>
<span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;[^(AUTHORS:)]&#39;</span><span class="p">,</span> <span class="n">page_two_text</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">



<div class="output_text output_subarea output_execute_result">
<pre>[&#39;\n&#39;,
 &#39; &#39;,
 &#39;\n&#39;,
 &#39;\n&#39;,
 &#39;m&#39;,
 &#39;y&#39;,
 &#39; &#39;,
 &#39;B&#39;,
 &#39;a&#39;,
 &#39;k&#39;,
 &#39;e&#39;,
 &#39;r&#39;,
 &#39;,&#39;,
 &#39; &#39;,
 &#39;F&#39;,
 &#39;i&#39;,
 &#39;n&#39;,
 &#39;a&#39;,
 &#39;n&#39;,
 &#39;c&#39;,
 &#39;e&#39;,
 &#39; &#39;,
 &#39;C&#39;,
 &#39;h&#39;,
 &#39;a&#39;,
 &#39;i&#39;,
 &#39;r&#39;,
 &#39;,&#39;,
 &#39; &#39;,
 &#39;x&#39;,
 &#39;3&#39;,
 &#39;4&#39;,
 &#39;5&#39;,
 &#39;,&#39;,
 &#39; &#39;,
 &#39;a&#39;,
 &#39;b&#39;,
 &#39;a&#39;,
 &#39;k&#39;,
 &#39;e&#39;,
 &#39;r&#39;,
 &#39;@&#39;,
 &#39;o&#39;,
 &#39;u&#39;,
 &#39;r&#39;,
 &#39;c&#39;,
 &#39;o&#39;,
 &#39;m&#39;,
 &#39;p&#39;,
 &#39;a&#39;,
 &#39;n&#39;,
 &#39;y&#39;,
 &#39;.&#39;,
 &#39;c&#39;,
 &#39;o&#39;,
 &#39;m&#39;,
 &#39;\n&#39;,
 &#39; &#39;,
 &#39; &#39;,
 &#39;\n&#39;,
 &#39;\n&#39;,
 &#39;C&#39;,
 &#39;h&#39;,
 &#39;r&#39;,
 &#39;i&#39;,
 &#39;s&#39;,
 &#39; &#39;,
 &#39;D&#39;,
 &#39;o&#39;,
 &#39;n&#39;,
 &#39;a&#39;,
 &#39;l&#39;,
 &#39;d&#39;,
 &#39;s&#39;,
 &#39;o&#39;,
 &#39;n&#39;,
 &#39;,&#39;,
 &#39; &#39;,
 &#39;c&#39;,
 &#39;c&#39;,
 &#39;o&#39;,
 &#39;u&#39;,
 &#39;n&#39;,
 &#39;t&#39;,
 &#39;i&#39;,
 &#39;n&#39;,
 &#39;g&#39;,
 &#39; &#39;,
 &#39;D&#39;,
 &#39;i&#39;,
 &#39;r&#39;,
 &#39;.&#39;,
 &#39;,&#39;,
 &#39; &#39;,
 &#39;x&#39;,
 &#39;6&#39;,
 &#39;2&#39;,
 &#39;1&#39;,
 &#39;,&#39;,
 &#39; &#39;,
 &#39;c&#39;,
 &#39;d&#39;,
 &#39;o&#39;,
 &#39;n&#39;,
 &#39;a&#39;,
 &#39;l&#39;,
 &#39;d&#39;,
 &#39;s&#39;,
 &#39;o&#39;,
 &#39;n&#39;,
 &#39;@&#39;,
 &#39;o&#39;,
 &#39;u&#39;,
 &#39;r&#39;,
 &#39;c&#39;,
 &#39;o&#39;,
 &#39;m&#39;,
 &#39;p&#39;,
 &#39;a&#39;,
 &#39;n&#39;,
 &#39;y&#39;,
 &#39;.&#39;,
 &#39;c&#39;,
 &#39;o&#39;,
 &#39;m&#39;,
 &#39;\n&#39;,
 &#39; &#39;,
 &#39; &#39;,
 &#39;\n&#39;,
 &#39;\n&#39;,
 &#39;E&#39;,
 &#39;r&#39;,
 &#39;i&#39;,
 &#39;n&#39;,
 &#39; &#39;,
 &#39;F&#39;,
 &#39;r&#39;,
 &#39;e&#39;,
 &#39;e&#39;,
 &#39;m&#39;,
 &#39;a&#39;,
 &#39;n&#39;,
 &#39;,&#39;,
 &#39; &#39;,
 &#39;r&#39;,
 &#39;.&#39;,
 &#39; &#39;,
 &#39;V&#39;,
 &#39;P&#39;,
 &#39;,&#39;,
 &#39; &#39;,
 &#39;x&#39;,
 &#39;8&#39;,
 &#39;7&#39;,
 &#39;9&#39;,
 &#39;,&#39;,
 &#39; &#39;,
 &#39;e&#39;,
 &#39;f&#39;,
 &#39;r&#39;,
 &#39;e&#39;,
 &#39;e&#39;,
 &#39;m&#39;,
 &#39;a&#39;,
 &#39;n&#39;,
 &#39;@&#39;,
 &#39;o&#39;,
 &#39;u&#39;,
 &#39;r&#39;,
 &#39;c&#39;,
 &#39;o&#39;,
 &#39;m&#39;,
 &#39;p&#39;,
 &#39;a&#39;,
 &#39;n&#39;,
 &#39;y&#39;,
 &#39;.&#39;,
 &#39;c&#39;,
 &#39;o&#39;,
 &#39;m&#39;,
 &#39;\n&#39;,
 &#39; &#39;,
 &#39; &#39;]</pre>
</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h4 id="5.-Open-the-file-contacts.txt-in-append-mode.-Add-the-text-of-page-2-from-above-to-contacts.txt.">5. Open the file <code>contacts.txt</code> in append mode. Add the text of page 2 from above to <code>contacts.txt</code>.<a class="anchor-link" href="#5.-Open-the-file-contacts.txt-in-append-mode.-Add-the-text-of-page-2-from-above-to-contacts.txt."> </a></h4><h4 id="CHALLENGE:-See-if-you-can-remove-the-word-&quot;AUTHORS:&quot;">CHALLENGE: See if you can remove the word "AUTHORS:"<a class="anchor-link" href="#CHALLENGE:-See-if-you-can-remove-the-word-&quot;AUTHORS:&quot;"> </a></h4>
</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>First_Name Last_Name, Title, Extension, EmailAUTHORS:
 
Amy Baker, Finance Chair, x345, abaker@ourcompany.com
 
Chris Donaldson, Accounting Dir., x621, cdonaldson@ourcompany.com
 
Erin Freeman, Sr. VP, x879, efreeman@ourcompany.com
 

</pre>
</div>
</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="o">**</span><span class="n">Simple</span> <span class="n">Solution</span><span class="o">**</span>
</pre></div>

    </div>
</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">myfile</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;contacts.txt&#39;</span><span class="p">,</span> <span class="s1">&#39;a+&#39;</span><span class="p">)</span>
<span class="n">myfile</span><span class="o">.</span><span class="n">seek</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">myfile</span><span class="o">.</span><span class="n">read</span><span class="p">())</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>First_Name Last_Name, Title, Extension, Email

</pre>
</div>
</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">myfile</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">page_two_text</span><span class="p">)</span>
<span class="n">myfile</span><span class="o">.</span><span class="n">seek</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">myfile</span><span class="o">.</span><span class="n">read</span><span class="p">())</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>First_Name Last_Name, Title, Extension, Email
AUTHORS:
 

Amy Baker, Finance Chair, x345, abaker@ourcompany.com
  

Chris Donaldson, Accounting Dir., x621, cdonaldson@ourcompany.com
  

Erin Freeman, Sr. VP, x879, efreeman@ourcompany.com
  
</pre>
</div>
</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">myfile</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</pre></div>

    </div>
</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>First_Name Last_Name, Title, Extension, Email
 
Amy Baker, Finance Chair, x345, abaker@ourcompany.com
 
Chris Donaldson, Accounting Dir., x621, cdonaldson@ourcompany.com
 
Erin Freeman, Sr. VP, x879, efreeman@ourcompany.com
 

</pre>
</div>
</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;contacts.txt&#39;</span><span class="p">,</span><span class="s1">&#39;a+&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">c</span><span class="p">:</span>
    <span class="n">c</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">page_two_text</span><span class="p">[</span><span class="mi">8</span><span class="p">:])</span>
    <span class="n">c</span><span class="o">.</span><span class="n">seek</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">c</span><span class="o">.</span><span class="n">read</span><span class="p">())</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>First_Name Last_Name, Title, Extension, Email
AUTHORS:
 

Amy Baker, Finance Chair, x345, abaker@ourcompany.com
  

Chris Donaldson, Accounting Dir., x621, cdonaldson@ourcompany.com
  

Erin Freeman, Sr. VP, x879, efreeman@ourcompany.com
  
 

Amy Baker, Finance Chair, x345, abaker@ourcompany.com
  

Chris Donaldson, Accounting Dir., x621, cdonaldson@ourcompany.com
  

Erin Freeman, Sr. VP, x879, efreeman@ourcompany.com
  
</pre>
</div>
</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="Regular-Expressions">Regular Expressions<a class="anchor-link" href="#Regular-Expressions"> </a></h2><h4 id="6.-Using-the-page_two_text-variable-created-above,-extract-any-email-addresses-that-were-contained-in-the-file-Business_Proposal.pdf.">6. Using the <code>page_two_text</code> variable created above, extract any email addresses that were contained in the file <code>Business_Proposal.pdf</code>.<a class="anchor-link" href="#6.-Using-the-page_two_text-variable-created-above,-extract-any-email-addresses-that-were-contained-in-the-file-Business_Proposal.pdf."> </a></h4>
</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="kn">import</span> <span class="nn">re</span>

<span class="c1"># Enter your regex pattern here. This may take several tries!</span>
<span class="n">pattern</span> <span class="o">=</span> 

<span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="n">pattern</span><span class="p">,</span> <span class="n">page_two_text</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">



<div class="output_text output_subarea output_execute_result">
<pre>[&#39;abaker@ourcompany.com&#39;,
 &#39;cdonaldson@ourcompany.com&#39;,
 &#39;efreeman@ourcompany.com&#39;]</pre>
</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p><strong>Solution</strong></p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="kn">import</span> <span class="nn">re</span>

<span class="n">pattern</span> <span class="o">=</span> <span class="sa">r</span><span class="s1">&#39;\w+@\w+.com&#39;</span>
<span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="n">pattern</span><span class="p">,</span> <span class="n">page_two_text</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">



<div class="output_text output_subarea output_execute_result">
<pre>[&#39;abaker@ourcompany.com&#39;,
 &#39;cdonaldson@ourcompany.com&#39;,
 &#39;efreeman@ourcompany.com&#39;]</pre>
</div>

</div>

</div>
</div>

</div>
    

</div>]]></content><author><name></name></author><category term="PyPDF2" /><category term="pdf" /><category term="NLP-Chapter-1" /><summary type="html"><![CDATA[The post contains additional practice exercises on the topics learnt in chapter 1]]></summary></entry><entry><title type="html">1.4 Regular Expression</title><link href="https://vicky-crasto.github.io/Learn-Project-Language/regular-expression/re/text-cleaning/re.findall/exclusion/nlp-chapter-1/2022/06/30/1-4-Regular-Expressions.html" rel="alternate" type="text/html" title="1.4 Regular Expression" /><published>2022-06-30T00:00:00-05:00</published><updated>2022-06-30T00:00:00-05:00</updated><id>https://vicky-crasto.github.io/Learn-Project-Language/regular-expression/re/text-cleaning/re.findall/exclusion/nlp-chapter-1/2022/06/30/1-4-Regular-Expressions</id><content type="html" xml:base="https://vicky-crasto.github.io/Learn-Project-Language/regular-expression/re/text-cleaning/re.findall/exclusion/nlp-chapter-1/2022/06/30/1-4-Regular-Expressions.html"><![CDATA[<!--
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: _notebooks/2022-06-30-1-4-Regular-Expressions.ipynb
-->

<div class="container" id="notebook-container">
        
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="Regular-exp.-library">Regular exp. library<a class="anchor-link" href="#Regular-exp.-library"> </a></h2>
</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="kn">import</span> <span class="nn">re</span>
</pre></div>

    </div>
</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h3 id="Finding-the-first-instance-in-the-text">Finding the first instance in the text<a class="anchor-link" href="#Finding-the-first-instance-in-the-text"> </a></h3>
</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">text</span> <span class="o">=</span> <span class="s2">&quot;The phone number given in the helpline is 408-999-4567&quot;</span>
<span class="n">pattern</span> <span class="o">=</span> <span class="s1">&#39;phone&#39;</span>
<span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="n">pattern</span><span class="p">,</span> <span class="n">text</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">



<div class="output_text output_subarea output_execute_result">
<pre>&lt;re.Match object; span=(4, 9), match=&#39;phone&#39;&gt;</pre>
</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>If the match is found then search return the location of the match. Note: It only gives the first instance in the text.</p>
<p>Span is the starting and ending index of the match. (Index starts from zero)</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">match</span><span class="o">=</span><span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="n">pattern</span><span class="p">,</span> <span class="n">text</span><span class="p">)</span>
<span class="n">match</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">



<div class="output_text output_subarea output_execute_result">
<pre>&lt;re.Match object; span=(4, 9), match=&#39;phone&#39;&gt;</pre>
</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p><strong>.span() give the span of the match, .start() give the start index, .end() gives the end index</strong></p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">match</span><span class="o">.</span><span class="n">span</span><span class="p">()</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">



<div class="output_text output_subarea output_execute_result">
<pre>(4, 9)</pre>
</div>

</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">match</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">



<div class="output_text output_subarea output_execute_result">
<pre>4</pre>
</div>

</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">match</span><span class="o">.</span><span class="n">end</span><span class="p">()</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">



<div class="output_text output_subarea output_execute_result">
<pre>9</pre>
</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h3 id="Find-all-instances-in-the-text">Find all instances in the text<a class="anchor-link" href="#Find-all-instances-in-the-text"> </a></h3>
</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">text1</span> <span class="o">=</span> <span class="s2">&quot;My phone is a hi-tech phone. The phone is dual band, with the lastest phone-tech processor&quot;</span>
</pre></div>

    </div>
</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">matches</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">&quot;phone&quot;</span><span class="p">,</span> <span class="n">text1</span><span class="p">)</span>
<span class="n">matches</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">



<div class="output_text output_subarea output_execute_result">
<pre>[&#39;phone&#39;, &#39;phone&#39;, &#39;phone&#39;, &#39;phone&#39;]</pre>
</div>

</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="nb">len</span><span class="p">(</span><span class="n">matches</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">



<div class="output_text output_subarea output_execute_result">
<pre>4</pre>
</div>

</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span> 
</pre></div>

    </div>
</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="k">for</span> <span class="n">match</span> <span class="ow">in</span> <span class="n">re</span><span class="o">.</span><span class="n">finditer</span><span class="p">(</span><span class="s1">&#39;phone&#39;</span><span class="p">,</span> <span class="n">text1</span><span class="p">):</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">match</span><span class="o">.</span><span class="n">span</span><span class="p">())</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>(3, 8)
(22, 27)
(33, 38)
(70, 75)
</pre>
</div>
</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p><strong>To find the word matched, use .group() method</strong></p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">match</span><span class="o">.</span><span class="n">group</span><span class="p">()</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">



<div class="output_text output_subarea output_execute_result">
<pre>&#39;phone&#39;</pre>
</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="Identifiers-in-Regex">Identifiers in Regex<a class="anchor-link" href="#Identifiers-in-Regex"> </a></h2>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p><table><tr><th>Character</th><th>Description</th><th>Example Pattern Code</th><th>Exammple Match</th></tr>&lt;/p&gt;
<p><tr><td><span>\d</span></td><td>A digit</td><td>file_\d\d</td><td>file_25</td></tr></p>
<p><tr><td><span>\w</span></td><td>Alphanumeric</td><td>\w-\w\w\w</td><td>A-b_1</td></tr></p>
<p><tr><td><span>\s</span></td><td>White space</td><td>a\sb\sc</td><td>a b c</td></tr></p>
<p><tr><td><span>\D</span></td><td>A non digit</td><td>\D\D\D</td><td>ABC</td></tr></p>
<p><tr><td><span>\W</span></td><td>Non-alphanumeric</td><td>\W\W\W\W\W</td><td>*-+=)</td></tr></p>
<p><tr><td><span>\S</span></td><td>Non-whitespace</td><td>\S\S\S\S</td><td>Yoyo</td></tr>&lt;/table&gt;</p>

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">text</span> 
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">



<div class="output_text output_subarea output_execute_result">
<pre>&#39;The phone number given in the helpline is 408-999-4567&#39;</pre>
</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>If we want to find phone number with the pattern xxx-xxx-xxxx, we can use the identifier for it.</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;\d\d\d-\d\d\d-\d\d\d\d&#39;</span><span class="p">,</span> <span class="n">text</span><span class="p">)</span><span class="o">.</span><span class="n">group</span><span class="p">()</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">



<div class="output_text output_subarea output_execute_result">
<pre>&#39;408-999-4567&#39;</pre>
</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="Quantifiers-in-Regex">Quantifiers in Regex<a class="anchor-link" href="#Quantifiers-in-Regex"> </a></h2>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>In repeating the identifier, we can use quantifiers to do the same thing.</p>

</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p><table><tr><th>Character</th><th>Description</th><th>Example Pattern Code</th><th>Exammple Match</th></tr>&lt;/p&gt;
<p><tr><td><span>+</span></td><td>Occurs one or more times</td><td>  Version \w-\w+</td><td>Version A-b1_1</td></tr></p>
<p><tr><td><span>{3}</span></td><td>Occurs exactly 3 times</td><td>\D{3}</td><td>abc</td></tr></p>
<p><tr><td><span>{2,4}</span></td><td>Occurs 2 to 4 times</td><td>\d{2,4}</td><td>123</td></tr></p>
<p><tr><td><span>{3,}</span></td><td>Occurs 3 or more</td><td>\w{3,}</td><td>anycharacters</td></tr></p>
<p><tr><td><span>\*</span></td><td>Occurs zero or more times</td><td>A\*B\*C*</td><td>AAACC</td></tr></p>
<p><tr><td><span>?</span></td><td>Once or none</td><td>plurals?</td><td>plural</td></tr>&lt;/table&gt;</p>

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;\d</span><span class="si">{3}</span><span class="s1">-\d</span><span class="si">{3}</span><span class="s1">-\d</span><span class="si">{4}</span><span class="s1">&#39;</span><span class="p">,</span> <span class="n">text</span><span class="p">)</span><span class="o">.</span><span class="n">group</span><span class="p">()</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">



<div class="output_text output_subarea output_execute_result">
<pre>&#39;408-999-4567&#39;</pre>
</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="Groups-in-Regex-search">Groups in Regex search<a class="anchor-link" href="#Groups-in-Regex-search"> </a></h2>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Using parentheses in regex we can create groups with the matched data</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">phone_pattern</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;(\d</span><span class="si">{3}</span><span class="s1">)-(\d</span><span class="si">{3}</span><span class="s1">)-(\d</span><span class="si">{4}</span><span class="s1">)&#39;</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">results</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="n">phone_pattern</span><span class="p">,</span> <span class="n">text</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">results</span><span class="o">.</span><span class="n">group</span><span class="p">()</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">



<div class="output_text output_subarea output_execute_result">
<pre>&#39;408-999-4567&#39;</pre>
</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Each parentheses in the regex pattern is group which can called out.</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">results</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">



<div class="output_text output_subarea output_execute_result">
<pre>&#39;408&#39;</pre>
</div>

</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">results</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">



<div class="output_text output_subarea output_execute_result">
<pre>&#39;999&#39;</pre>
</div>

</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">results</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">



<div class="output_text output_subarea output_execute_result">
<pre>&#39;4567&#39;</pre>
</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="Or-operator-|">Or operator |<a class="anchor-link" href="#Or-operator-|"> </a></h2>
</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="sa">r</span><span class="s2">&quot;man|woman&quot;</span><span class="p">,</span> <span class="s2">&quot;This man is a good person&quot;</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">



<div class="output_text output_subarea output_execute_result">
<pre>&lt;re.Match object; span=(5, 8), match=&#39;man&#39;&gt;</pre>
</div>

</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="sa">r</span><span class="s2">&quot;man|woman&quot;</span><span class="p">,</span> <span class="s2">&quot;This woman is a good person&quot;</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">



<div class="output_text output_subarea output_execute_result">
<pre>&lt;re.Match object; span=(5, 10), match=&#39;woman&#39;&gt;</pre>
</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="Wildcard-characters">Wildcard characters<a class="anchor-link" href="#Wildcard-characters"> </a></h2>
</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="sa">r</span><span class="s2">&quot;.at&quot;</span><span class="p">,</span> <span class="s2">&quot;The fat cat ate the peta bread and sat on the rattop and splat&quot;</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">



<div class="output_text output_subarea output_execute_result">
<pre>[&#39;fat&#39;, &#39;cat&#39;, &#39; at&#39;, &#39;sat&#39;, &#39;rat&#39;, &#39;lat&#39;]</pre>
</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>We see that all 3 letter word being matched. One single period matches on wildcard letter before the pattern.</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="sa">r</span><span class="s2">&quot;..at&quot;</span><span class="p">,</span> <span class="s2">&quot;The fat cat ate the peta bread and sat on the rattop and splat&quot;</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">



<div class="output_text output_subarea output_execute_result">
<pre>[&#39; fat&#39;, &#39; cat&#39;, &#39; sat&#39;, &#39; rat&#39;, &#39;plat&#39;]</pre>
</div>

</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="sa">r</span><span class="s2">&quot;\S+at&quot;</span><span class="p">,</span> <span class="s2">&quot;The fat cat ate the peta bread and sat on the rattop and splat&quot;</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">



<div class="output_text output_subarea output_execute_result">
<pre>[&#39;fat&#39;, &#39;cat&#39;, &#39;sat&#39;, &#39;rat&#39;, &#39;splat&#39;]</pre>
</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>In case one or more non whitespace that end with 'at' are matched.</p>

</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="Starts-with-and-ends-with">Starts with and ends with<a class="anchor-link" href="#Starts-with-and-ends-with"> </a></h2>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>^ : Starts with , $ : ends with</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;\d$&#39;</span><span class="p">,</span> <span class="s2">&quot;This ends with a number 2&quot;</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">



<div class="output_text output_subarea output_execute_result">
<pre>[&#39;2&#39;]</pre>
</div>

</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;^\d&#39;</span><span class="p">,</span> <span class="s2">&quot;5 is the number of choice&quot;</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">



<div class="output_text output_subarea output_execute_result">
<pre>[&#39;5&#39;]</pre>
</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="Exclusion">Exclusion<a class="anchor-link" href="#Exclusion"> </a></h2>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Square brackerts[^] are used for exclude a character.</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">phrase</span> <span class="o">=</span> <span class="s2">&quot;there are 3 numbers 34 insides 5 this sentence.&quot;</span>
</pre></div>

    </div>
</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;[^\d]+&#39;</span><span class="p">,</span> <span class="n">phrase</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">



<div class="output_text output_subarea output_execute_result">
<pre>[&#39;there are &#39;, &#39; numbers &#39;, &#39; insides &#39;, &#39; this sentence.&#39;]</pre>
</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="Removing-the-punctuation">Removing the punctuation<a class="anchor-link" href="#Removing-the-punctuation"> </a></h2>
</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">test_phrase</span> <span class="o">=</span> <span class="s1">&#39;This is a string! But it has punctuation. How can we remove it?&#39;</span>
</pre></div>

    </div>
</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">test_phrase</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">



<div class="output_text output_subarea output_execute_result">
<pre>&#39;This is a string! But it has punctuation. How can we remove it?&#39;</pre>
</div>

</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;[^!.? ]+&#39;</span><span class="p">,</span> <span class="n">test_phrase</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">



<div class="output_text output_subarea output_execute_result">
<pre>[&#39;This&#39;,
 &#39;is&#39;,
 &#39;a&#39;,
 &#39;string&#39;,
 &#39;But&#39;,
 &#39;it&#39;,
 &#39;has&#39;,
 &#39;punctuation&#39;,
 &#39;How&#39;,
 &#39;can&#39;,
 &#39;we&#39;,
 &#39;remove&#39;,
 &#39;it&#39;]</pre>
</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p><strong>Putting it together</strong></p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">clean</span> <span class="o">=</span> <span class="s1">&#39; &#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;[^!.? ]+&#39;</span><span class="p">,</span> <span class="n">test_phrase</span><span class="p">))</span>
</pre></div>

    </div>
</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">clean</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">



<div class="output_text output_subarea output_execute_result">
<pre>&#39;This is a string But it has punctuation How can we remove it&#39;</pre>
</div>

</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span> 
</pre></div>

    </div>
</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">text3</span> <span class="o">=</span> <span class="s1">&#39;Only find the hypen-words in this sentence. But you do not know how long-ish they are&#39;</span>
</pre></div>

    </div>
</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">text3</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">



<div class="output_text output_subarea output_execute_result">
<pre>&#39;Only find the hypen-words in this sentence. But you do not know how long-ish they are&#39;</pre>
</div>

</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;[\w]+-[\w+&#39;</span><span class="p">,</span><span class="n">text3</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">



<div class="output_text output_subarea output_execute_result">
<pre>[&#39;hypen-words&#39;, &#39;long-ish&#39;]</pre>
</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p><strong>Note</strong> Difference between [], ()</p>
<p>The [] construct in a regex is essentially shorthand for an | on all of the contents. For example [abc] matches a, b or c. Additionally the - character has special meaning inside of a []. It provides a range construct. The regex [a-z] will match any letter a through z.</p>
<p>The () construct is a grouping construct establishing a precedence order (it also has impact on accessing matched substrings but that's a bit more of an advanced topic). The regex (abc) will match the string "abc".</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span> 
</pre></div>

    </div>
</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">text</span> <span class="o">=</span> <span class="s1">&#39;Hello, would you like some catfish?&#39;</span>
<span class="n">texttwo</span> <span class="o">=</span> <span class="s2">&quot;Hello, would you like to take a catnap?&quot;</span>
<span class="n">textthree</span> <span class="o">=</span> <span class="s2">&quot;Hello, have you seen this caterpillar?&quot;</span>
</pre></div>

    </div>
</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;cat(fish|nap|claw)&#39;</span><span class="p">,</span><span class="n">text</span><span class="p">)</span><span class="o">.</span><span class="n">group</span><span class="p">()</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">



<div class="output_text output_subarea output_execute_result">
<pre>&#39;catfish&#39;</pre>
</div>

</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;cat(fish|nap|claw)&#39;</span><span class="p">,</span><span class="n">texttwo</span><span class="p">)</span><span class="o">.</span><span class="n">group</span><span class="p">()</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">



<div class="output_text output_subarea output_execute_result">
<pre>&#39;catnap&#39;</pre>
</div>

</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;cat(fish|nap|claw)&#39;</span><span class="p">,</span><span class="n">textthree</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

</div>
    

&lt;/div&gt;
 

</table></p></div></div></div></table></p></div></div></div></div>]]></content><author><name></name></author><category term="regular-expression" /><category term="re" /><category term="text-cleaning" /><category term="re.findall" /><category term="exclusion" /><category term="NLP-Chapter-1" /><summary type="html"><![CDATA[The post explains how to use regular expression to find and modify text.]]></summary></entry><entry><title type="html">1.3 Working with pdf files</title><link href="https://vicky-crasto.github.io/Learn-Project-Language/pypdf2/pdf/nlp-chapter-1/2022/06/29/1-3-Working-with-pdf-files.html" rel="alternate" type="text/html" title="1.3 Working with pdf files" /><published>2022-06-29T00:00:00-05:00</published><updated>2022-06-29T00:00:00-05:00</updated><id>https://vicky-crasto.github.io/Learn-Project-Language/pypdf2/pdf/nlp-chapter-1/2022/06/29/1-3-Working-with-pdf-files</id><content type="html" xml:base="https://vicky-crasto.github.io/Learn-Project-Language/pypdf2/pdf/nlp-chapter-1/2022/06/29/1-3-Working-with-pdf-files.html"><![CDATA[<!--
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: _notebooks/2022-06-29-1-3-Working-with-pdf-files.ipynb
-->

<div class="container" id="notebook-container">
        
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="Installing-the-library-PyPDF2">Installing the library PyPDF2<a class="anchor-link" href="#Installing-the-library-PyPDF2"> </a></h2>
</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">pip</span> <span class="n">install</span> <span class="n">PyPDF2</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>Collecting PyPDF2
  Downloading PyPDF2-2.4.0-py3-none-any.whl (197 kB)
Requirement already satisfied: typing-extensions in c:\users\vicky.crasto\anaconda3\lib\site-packages (from PyPDF2) (3.10.0.2)
Installing collected packages: PyPDF2
Successfully installed PyPDF2-2.4.0
Note: you may need to restart the kernel to use updated packages.
</pre>
</div>
</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="kn">import</span> <span class="nn">PyPDF2</span>
</pre></div>

    </div>
</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="Working-with-PyPDF2">Working with PyPDF2<a class="anchor-link" href="#Working-with-PyPDF2"> </a></h2>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h3 id="Reading-a-pdf">Reading a pdf<a class="anchor-link" href="#Reading-a-pdf"> </a></h3>
</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">pdf1</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s2">&quot;data_files/US_Declaration.pdf&quot;</span><span class="p">,</span> <span class="s1">&#39;rb&#39;</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Note : the mode is 'rb' - read the file as a binary</p>

</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p><strong>Creating a pdf reader instance</strong></p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">pdf_reader</span> <span class="o">=</span> <span class="n">PyPDF2</span><span class="o">.</span><span class="n">PdfFileReader</span><span class="p">(</span><span class="n">pdf1</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p><strong>Number of pages in the pdf</strong></p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">pdf_reader</span><span class="o">.</span><span class="n">numPages</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">



<div class="output_text output_subarea output_execute_result">
<pre>5</pre>
</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h3 id="Extracting-text-from-a-page">Extracting text from a page<a class="anchor-link" href="#Extracting-text-from-a-page"> </a></h3>
</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">page_one</span> <span class="o">=</span> <span class="n">pdf_reader</span><span class="o">.</span><span class="n">getPage</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
<span class="n">page_one_text</span> <span class="o">=</span> <span class="n">page_one</span><span class="o">.</span><span class="n">extractText</span><span class="p">()</span>
<span class="n">page_one_text</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">



<div class="output_text output_subarea output_execute_result">
<pre>&#34; Declaration of Independence\nIN CONGRESS, July 4, 1776.  \nThe unanimous Declaration of the thirteen united States of America, \nWhen in the Course of human events, it becomes necessary for one people to dissolve the\npolitical bands which have connected them with another, and to assume among the powers of the\nearth, the separate and equal station to which the Laws of Nature and of Nature&#39;s God entitle\nthem, a decent respect to the opinions of mankind requires that they should declare the causes\nwhich impel them to the separation. \nWe hold these truths to be self-evident, that all men are created equal, that they are endowed by\ntheir Creator with certain unalienable Rights, that among these are Life, Liberty and the pursuit\nof Happiness.— \x14That to secure these rights, Governments are instituted among Men, deriving\ntheir just powers from the consent of the governed,—  \x14That whenever any Form of Government\nbecomes destructive of these ends, it is the Right of the People to alter or to abolish it, and to\ninstitute new Government, laying its foundation on such principles and organizing its powers in\nsuch form, as to them shall seem most likely to effect their Safety and Happiness. Prudence,\nindeed, will dictate that Governments long established should not be changed for light and\ntransient causes; and accordingly all experience hath shewn, that mankind are more disposed to\nsuffer, while evils are sufferable, than to right themselves by abolishing the forms to which they\nare accustomed. But when a long train of abuses and usurpations, pursuing invariably the same\nObject evinces a design to reduce them under absolute Despotism, it is their right, it is their duty,\nto throw off such Government, and to provide new Guards for their future security.— \x14Such has\nbeen the patient sufferance of these Colonies; and such is now the necessity which constrains\nthem to alter their former Systems of Government. The history of the present King of Great\nBritain is a history of repeated injuries and usurpations, all having in direct object the\nestablishment of an absolute Tyranny over these States. To prove this, let Facts be submitted to a\ncandid world. \nHe has refused his Assent to Laws, the most wholesome and necessary for the\npublic good.\nHe has forbidden his Governors to pass Laws of immediate and pressing\nimportance, unless suspended in their operation till his Assent should be obtained;\nand when so suspended, he has utterly neglected to attend to them.\nHe has refused to pass other Laws for the accommodation of large districts of\npeople, unless those people would relinquish the right of Representation in the\nLegislature, a right inestimable to them and formidable to tyrants only. \nHe has called together legislative bodies at places unusual, uncomfortable, and distant\nfrom the depository of their public Records, for the sole purpose of fatiguing them into\ncompliance with his measures.&#34;</pre>
</div>

</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">pdf1</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</pre></div>

    </div>
</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="Adding-pages-to-pdf-file">Adding pages to pdf file<a class="anchor-link" href="#Adding-pages-to-pdf-file"> </a></h2>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p><strong>Open the pdf and extracting the first page</strong></p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">pdf2</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s2">&quot;data_files/US_Declaration.pdf&quot;</span><span class="p">,</span><span class="s1">&#39;rb&#39;</span><span class="p">)</span>
<span class="n">pdf_reader</span> <span class="o">=</span> <span class="n">PyPDF2</span><span class="o">.</span><span class="n">PdfFileReader</span><span class="p">(</span><span class="n">pdf2</span><span class="p">)</span>
<span class="n">first_page</span> <span class="o">=</span> <span class="n">pdf_reader</span><span class="o">.</span><span class="n">getPage</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p><strong>Creating a writer object</strong></p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">pdf_writer</span> <span class="o">=</span> <span class="n">PyPDF2</span><span class="o">.</span><span class="n">PdfFileWriter</span><span class="p">()</span>
<span class="n">pdf_writer</span><span class="o">.</span><span class="n">addPage</span><span class="p">(</span><span class="n">first_page</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">pdf_output</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s2">&quot;New_doc.pdf&quot;</span><span class="p">,</span> <span class="s1">&#39;wb&#39;</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">pdf_writer</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">pdf_output</span><span class="p">)</span>
<span class="n">pdf_output</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
<span class="n">pdf2</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</pre></div>

    </div>
</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p><strong>Checking the new doc which is created</strong></p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">pdf3</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s2">&quot;New_doc.pdf&quot;</span><span class="p">,</span> <span class="s1">&#39;rb&#39;</span><span class="p">)</span>
<span class="n">pdf_reader</span> <span class="o">=</span> <span class="n">PyPDF2</span><span class="o">.</span><span class="n">PdfFileReader</span><span class="p">(</span><span class="n">pdf3</span><span class="p">)</span>
<span class="n">pdf_reader</span><span class="o">.</span><span class="n">numPages</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">



<div class="output_text output_subarea output_execute_result">
<pre>1</pre>
</div>

</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">pdf3</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</pre></div>

    </div>
</div>
</div>

</div>
    

</div>]]></content><author><name></name></author><category term="PyPDF2" /><category term="pdf" /><category term="NLP-Chapter-1" /><summary type="html"><![CDATA[The post explains how to read,edit and append pdf files in python]]></summary></entry><entry><title type="html">1.2 Working with text files</title><link href="https://vicky-crasto.github.io/Learn-Project-Language/readlines()/textfiles/nlp-chapter-1/2022/06/28/1-2-Working-with-text-files.html" rel="alternate" type="text/html" title="1.2 Working with text files" /><published>2022-06-28T00:00:00-05:00</published><updated>2022-06-28T00:00:00-05:00</updated><id>https://vicky-crasto.github.io/Learn-Project-Language/readlines()/textfiles/nlp-chapter-1/2022/06/28/1-2-Working-with-text-files</id><content type="html" xml:base="https://vicky-crasto.github.io/Learn-Project-Language/readlines()/textfiles/nlp-chapter-1/2022/06/28/1-2-Working-with-text-files.html"><![CDATA[<!--
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: _notebooks/2022-06-28-1-2-Working-with-text-files.ipynb
-->

<div class="container" id="notebook-container">
        
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="Working-with-text-file-in-python">Working with text file in python<a class="anchor-link" href="#Working-with-text-file-in-python"> </a></h2>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h3 id="Creating-a-text-file-in-python">Creating a text file in python<a class="anchor-link" href="#Creating-a-text-file-in-python"> </a></h3>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>%%writefile test.txt ( Use this magic command before the text)</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">Hello</span><span class="p">,</span> <span class="n">this</span> <span class="ow">is</span> <span class="n">a</span> <span class="n">new</span> <span class="n">file</span> <span class="n">create</span> <span class="n">using</span> <span class="n">python</span> <span class="n">ide</span><span class="o">.</span>
<span class="n">This</span> <span class="n">the</span> <span class="n">second</span> <span class="n">line</span> <span class="n">of</span> <span class="n">the</span> <span class="n">file</span><span class="o">.</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>Writing test.txt
</pre>
</div>
</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h3 id="Understanding-the-location-of-the-file">Understanding the location of the file<a class="anchor-link" href="#Understanding-the-location-of-the-file"> </a></h3>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Give the location of the present working directory</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">pwd</span><span class="p">()</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">



<div class="output_text output_subarea output_execute_result">
<pre>&#39;C:\\Users\\Vicky.Crasto\\OneDrive - Unilever\\Work_file_082021\\05_Other_learning\\NLP\\01_Udemy_JoseP&#39;</pre>
</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p><strong>Opening the file</strong></p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">myfile</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s2">&quot;test.txt&quot;</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">myfile</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">



<div class="output_text output_subarea output_execute_result">
<pre>&lt;_io.TextIOWrapper name=&#39;test.txt&#39; mode=&#39;r&#39; encoding=&#39;cp1252&#39;&gt;</pre>
</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>This is the location in the memory which hold the file.</p>

</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="Using-.read()-and-.seek()">Using .read() and .seek()<a class="anchor-link" href="#Using-.read()-and-.seek()"> </a></h2>
</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">myfile</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">



<div class="output_text output_subarea output_execute_result">
<pre>&#39;Hello, this is a new file create using python ide.\nThis the second line of the file.\n&#39;</pre>
</div>

</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">myfile</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">



<div class="output_text output_subarea output_execute_result">
<pre>&#39;&#39;</pre>
</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>The second time the function it called it does not give any output since the cursor has reached the end of the document. There is nothing more read. Hence we need to reset the cursor to the start.</p>

</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p><strong>Resetting the cursor</strong></p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">myfile</span><span class="o">.</span><span class="n">seek</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">



<div class="output_text output_subarea output_execute_result">
<pre>0</pre>
</div>

</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">myfile</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">



<div class="output_text output_subarea output_execute_result">
<pre>&#39;Hello, this is a new file create using python ide.\nThis the second line of the file.\n&#39;</pre>
</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="Using-.readlines()">Using .readlines()<a class="anchor-link" href="#Using-.readlines()"> </a></h2>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>readlines() help to read the file line by line. Note: All the data is helded in the memory, hence large files will need to handled carefully.</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">myfile</span><span class="o">.</span><span class="n">seek</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
<span class="n">myfile</span><span class="o">.</span><span class="n">readlines</span><span class="p">()</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">



<div class="output_text output_subarea output_execute_result">
<pre>[&#39;Hello, this is a new file create using python ide.\n&#39;,
 &#39;This the second line of the file.\n&#39;]</pre>
</div>

</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">myfile</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</pre></div>

    </div>
</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="Writing-a-file---Understanding-the-mode">Writing a file - Understanding the mode<a class="anchor-link" href="#Writing-a-file---Understanding-the-mode"> </a></h2>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>While opening the file, we can open it with different modes</p>
<ul>
<li>'r' default to read the file</li>
<li>'w+' read and write the file.(Overwrites the existing file)</li>
<li>'wb+' read and write as binary (used in case of pdf)</li>
</ul>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">myfile</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s2">&quot;test.txt&quot;</span><span class="p">,</span> <span class="n">mode</span><span class="o">=</span> <span class="s1">&#39;w+&#39;</span><span class="p">)</span>
<span class="n">myfile</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s2">&quot;This is an additional file&quot;</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">



<div class="output_text output_subarea output_execute_result">
<pre>26</pre>
</div>

</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">myfile</span><span class="o">.</span><span class="n">seek</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
<span class="n">myfile</span><span class="o">.</span><span class="n">readlines</span><span class="p">()</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">



<div class="output_text output_subarea output_execute_result">
<pre>[&#39;This is an additional file&#39;]</pre>
</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Hence the existing data is deleted and the new data is overwrite.</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">myfile</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</pre></div>

    </div>
</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="Appending-a-file">Appending a file<a class="anchor-link" href="#Appending-a-file"> </a></h2>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Passing the argument <code>'a'</code> opens the file and puts the pointer at the end, so anything written is appended.</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">myfile</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s2">&quot;test.txt&quot;</span><span class="p">,</span> <span class="s1">&#39;a+&#39;</span><span class="p">)</span>
<span class="n">myfile</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">Appending a new line to the existing line&quot;</span><span class="p">)</span>
<span class="n">myfile</span><span class="o">.</span><span class="n">seek</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">myfile</span><span class="o">.</span><span class="n">read</span><span class="p">())</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>This is an additional file
Appending a new line to the existing line
Appending a new line to the existing line
Appending a new line to the existing line
Appending a new line to the existing line
</pre>
</div>
</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">myfile</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</pre></div>

    </div>
</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="Aliases-and-context-managers">Aliases and context managers<a class="anchor-link" href="#Aliases-and-context-managers"> </a></h2>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>You can assign temporary variable names as aliases, and manage the opening and closing of files automatically using a context manager:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;test.txt&#39;</span><span class="p">,</span><span class="s1">&#39;r&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">txt</span><span class="p">:</span>
    <span class="n">first_line</span> <span class="o">=</span> <span class="n">txt</span><span class="o">.</span><span class="n">readlines</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span>
<span class="nb">print</span><span class="p">(</span><span class="n">first_line</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>This is an additional file

</pre>
</div>
</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>By using this method, the file is opened, read and closed by context mananger automatically after doing the specified operation.</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">first_line</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">



<div class="output_text output_subarea output_execute_result">
<pre>&#39;This is an additional file\n&#39;</pre>
</div>

</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">txt</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_text output_error">
<pre>
<span class="ansi-red-intense-fg ansi-bold">---------------------------------------------------------------------------</span>
<span class="ansi-red-intense-fg ansi-bold">ValueError</span>                                Traceback (most recent call last)
<span class="ansi-green-intense-fg ansi-bold">C:\Users\VICKY~1.CRA\AppData\Local\Temp/ipykernel_9856/1416744708.py</span> in <span class="ansi-cyan-fg">&lt;module&gt;</span>
<span class="ansi-green-intense-fg ansi-bold">----&gt; 1</span><span class="ansi-yellow-intense-fg ansi-bold"> </span>txt<span class="ansi-yellow-intense-fg ansi-bold">.</span>read<span class="ansi-yellow-intense-fg ansi-bold">(</span><span class="ansi-yellow-intense-fg ansi-bold">)</span>

<span class="ansi-red-intense-fg ansi-bold">ValueError</span>: I/O operation on closed file.</pre>
</div>
</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Hence the extract line remain in the object but the file is closed by the context manager.</p>

</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="Iterating-through-a-file">Iterating through a file<a class="anchor-link" href="#Iterating-through-a-file"> </a></h2>
</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;test.txt&#39;</span><span class="p">,</span> <span class="s1">&#39;r&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">txt</span><span class="p">:</span>
    <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">txt</span><span class="p">:</span>
        <span class="nb">print</span><span class="p">(</span><span class="n">line</span> <span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s1">&#39;$$$$&#39;</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>This is an additional file
$$$$Appending a new line to the existing line
$$$$Appending a new line to the existing line
$$$$Appending a new line to the existing line
$$$$Appending a new line to the existing line$$$$</pre>
</div>
</div>

</div>
</div>

</div>
    

</div>]]></content><author><name></name></author><category term="readlines()" /><category term="textfiles" /><category term="NLP-Chapter-1" /><summary type="html"><![CDATA[The post explains how to create and work with text files in python.]]></summary></entry><entry><title type="html">1.1 Learning to use F string literal</title><link href="https://vicky-crasto.github.io/Learn-Project-Language/nlp/nlp-chapter-1/2022/06/25/1-1-Text-Basics-using-Fstring-literal.html" rel="alternate" type="text/html" title="1.1 Learning to use F string literal" /><published>2022-06-25T00:00:00-05:00</published><updated>2022-06-25T00:00:00-05:00</updated><id>https://vicky-crasto.github.io/Learn-Project-Language/nlp/nlp-chapter-1/2022/06/25/1-1-Text-Basics--using--Fstring-literal</id><content type="html" xml:base="https://vicky-crasto.github.io/Learn-Project-Language/nlp/nlp-chapter-1/2022/06/25/1-1-Text-Basics-using-Fstring-literal.html"><![CDATA[<!--
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: _notebooks/2022-06-25-1-1-Text-Basics- using- Fstring-literal.ipynb
-->

<div class="container" id="notebook-container">
        
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p><strong>Topics covered</strong></p>
<ul>
<li>F string formating in printing text</li>
<li>Alignment, padding Fstring</li>
<li>Format dates in Printing</li>
</ul>

</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="F-string-basics">F string basics<a class="anchor-link" href="#F-string-basics"> </a></h2>
</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">person</span> <span class="o">=</span> <span class="s2">&quot;Richard&quot;</span>
</pre></div>

    </div>
</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;The name of the boy is </span><span class="si">{</span><span class="n">person</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>The name of the boy is Richard
</pre>
</div>
</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h4 id="Using-a-dictionary-with-f-string">Using a dictionary with f string<a class="anchor-link" href="#Using-a-dictionary-with-f-string"> </a></h4>
</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">d</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;Roll no&#39;</span> <span class="p">:</span> <span class="mi">12</span> <span class="p">,</span> <span class="s1">&#39;Subject&#39;</span><span class="p">:</span> <span class="s2">&quot;English&quot;</span><span class="p">}</span>
</pre></div>

    </div>
</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;The student with roll no </span><span class="si">{</span><span class="n">d</span><span class="p">[</span><span class="s1">&#39;Roll no&#39;</span><span class="p">]</span><span class="si">}</span><span class="s2">, got highest marks in </span><span class="si">{</span><span class="n">d</span><span class="p">[</span><span class="s1">&#39;Subject&#39;</span><span class="p">]</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>The student with roll no 12, got highest marks in English
</pre>
</div>
</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h4 id="Using-a-list">Using a list<a class="anchor-link" href="#Using-a-list"> </a></h4>
</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">l</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&quot;mango&quot;</span><span class="p">,</span> <span class="s2">&quot;orange&quot;</span><span class="p">,</span><span class="s2">&quot;banana&quot;</span><span class="p">]</span>
</pre></div>

    </div>
</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;The fruit that I enjoy the most is </span><span class="si">{</span><span class="n">l</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="si">}</span><span class="s2"> and </span><span class="si">{</span><span class="n">l</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>The fruit that I enjoy the most is mango and orange
</pre>
</div>
</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h3 id="Minimum-Widths,-Alignment-and-Padding">Minimum Widths, Alignment and Padding<a class="anchor-link" href="#Minimum-Widths,-Alignment-and-Padding"> </a></h3><p>You can pass arguments inside a nested set of curly braces to set a minimum width for the field, the alignment and even padding characters.</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">library</span> <span class="o">=</span> <span class="p">[(</span><span class="s1">&#39;Author&#39;</span><span class="p">,</span> <span class="s1">&#39;Topic&#39;</span><span class="p">,</span> <span class="s1">&#39;Pages&#39;</span><span class="p">),</span> <span class="p">(</span><span class="s1">&#39;Twain&#39;</span><span class="p">,</span> <span class="s1">&#39;Rafting&#39;</span><span class="p">,</span> <span class="mi">601</span><span class="p">),</span> <span class="p">(</span><span class="s1">&#39;Feynman&#39;</span><span class="p">,</span> <span class="s1">&#39;Physics&#39;</span><span class="p">,</span> <span class="mi">95</span><span class="p">),</span> <span class="p">(</span><span class="s1">&#39;Hamilton&#39;</span><span class="p">,</span> <span class="s1">&#39;Mythology&#39;</span><span class="p">,</span> <span class="mi">144</span><span class="p">)]</span>
</pre></div>

    </div>
</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h3 id="Tuple-unpacking">Tuple unpacking<a class="anchor-link" href="#Tuple-unpacking"> </a></h3>
</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="k">for</span> <span class="n">author</span><span class="p">,</span> <span class="n">topic</span><span class="p">,</span> <span class="n">page</span> <span class="ow">in</span> <span class="n">library</span><span class="p">:</span>
    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">author</span><span class="si">}</span><span class="s2">, </span><span class="si">{</span><span class="n">topic</span><span class="si">}</span><span class="s2">,</span><span class="si">{</span><span class="n">page</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>Author, Topic,Pages
Twain, Rafting,601
Feynman, Physics,95
Hamilton, Mythology,144
</pre>
</div>
</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h3 id="aligning-the-text">aligning the text<a class="anchor-link" href="#aligning-the-text"> </a></h3>
</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="k">for</span> <span class="n">author</span><span class="p">,</span> <span class="n">topic</span><span class="p">,</span> <span class="n">page</span> <span class="ow">in</span> <span class="n">library</span><span class="p">:</span>
    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">author</span><span class="si">:{</span><span class="mi">10</span><span class="si">}}</span><span class="s2"> </span><span class="si">{</span><span class="n">topic</span><span class="si">:{</span><span class="mi">8</span><span class="si">}}{</span><span class="n">page</span><span class="si">:{</span><span class="mi">7</span><span class="si">}}</span><span class="s2">&quot;</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>Author     Topic   Pages  
Twain      Rafting     601
Feynman    Physics      95
Hamilton   Mythology    144
</pre>
</div>
</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Here the first three lines align, except <code>Pages</code> follows a default left-alignment while numbers are right-aligned. Also, the fourth line's page number is pushed to the right as <code>Mythology</code> exceeds the minimum field width of <code>8</code>. When setting minimum field widths make sure to take the longest item into account.</p>
<p>To set the alignment, use the character <code>&lt;</code> for left-align,  <code>^</code> for center, <code>&gt;</code> for right.<br />
To set padding, precede the alignment character with the padding character (<code>-</code> and <code>.</code> are common choices).</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="k">for</span> <span class="n">author</span><span class="p">,</span> <span class="n">topic</span><span class="p">,</span> <span class="n">page</span> <span class="ow">in</span> <span class="n">library</span><span class="p">:</span>
    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">author</span><span class="si">:{</span><span class="mi">10</span><span class="si">}}</span><span class="s2"> </span><span class="si">{</span><span class="n">topic</span><span class="si">:{</span><span class="mi">10</span><span class="si">}}{</span><span class="n">page</span><span class="si">:</span><span class="s2">&gt;</span><span class="si">{</span><span class="mi">7</span><span class="si">}}</span><span class="s2">&quot;</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>Author     Topic       Pages
Twain      Rafting       601
Feynman    Physics        95
Hamilton   Mythology     144
</pre>
</div>
</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="k">for</span> <span class="n">author</span><span class="p">,</span> <span class="n">topic</span><span class="p">,</span> <span class="n">page</span> <span class="ow">in</span> <span class="n">library</span><span class="p">:</span>
    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">author</span><span class="si">:{</span><span class="mi">10</span><span class="si">}}</span><span class="s2"> </span><span class="si">{</span><span class="n">topic</span><span class="si">:{</span><span class="mi">10</span><span class="si">}}{</span><span class="n">page</span><span class="si">:</span><span class="s2">.&gt;</span><span class="si">{</span><span class="mi">7</span><span class="si">}}</span><span class="s2">&quot;</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>Author     Topic     ..Pages
Twain      Rafting   ....601
Feynman    Physics   .....95
Hamilton   Mythology ....144
</pre>
</div>
</div>

</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span> 
</pre></div>

    </div>
</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="kn">from</span> <span class="nn">datetime</span> <span class="kn">import</span> <span class="n">datetime</span>
</pre></div>

    </div>
</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">today</span> <span class="o">=</span> <span class="n">datetime</span><span class="p">(</span><span class="n">year</span><span class="o">=</span><span class="mi">2022</span><span class="p">,</span> <span class="n">month</span> <span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">day</span> <span class="o">=</span> <span class="mi">27</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;</span><span class="si">{</span><span class="n">today</span><span class="si">:</span><span class="s1">%B,%d, %Y</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>January,27, 2018
</pre>
</div>
</div>

</div>
</div>

</div>
    

</div>]]></content><author><name></name></author><category term="NLP" /><category term="NLP-Chapter-1" /><summary type="html"><![CDATA[Learning to use F string for printing. Also alignment and padding of Fstring. Formating of dates while using Fstring is also shown.]]></summary></entry></feed>